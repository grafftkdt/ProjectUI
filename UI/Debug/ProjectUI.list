
ProjectUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005124  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000002c  08005310  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08005310  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a129  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001842  00000000  00000000  0002a185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f32  00000000  00000000  0002cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3eb  00000000  00000000  00041bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d1b  00000000  00000000  0004cfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0cc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000d0d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052a4 	.word	0x080052a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	080052a4 	.word	0x080052a4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96e 	b.w	8000d08 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8083 	bne.w	8000b5a <__udivmoddi4+0x116>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d947      	bls.n	8000aea <__udivmoddi4+0xa6>
 8000a5a:	fab2 f282 	clz	r2, r2
 8000a5e:	b142      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	f1c2 0020 	rsb	r0, r2, #32
 8000a64:	fa24 f000 	lsr.w	r0, r4, r0
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	4097      	lsls	r7, r2
 8000a6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbbc f6f8 	udiv	r6, ip, r8
 8000a7c:	fa1f fe87 	uxth.w	lr, r7
 8000a80:	fb08 c116 	mls	r1, r8, r6, ip
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f10e 	mul.w	r1, r6, lr
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a96:	f080 8119 	bcs.w	8000ccc <__udivmoddi4+0x288>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8116 	bls.w	8000ccc <__udivmoddi4+0x288>
 8000aa0:	3e02      	subs	r6, #2
 8000aa2:	443b      	add	r3, r7
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aac:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab8:	45a6      	cmp	lr, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8105 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000ac6:	45a6      	cmp	lr, r4
 8000ac8:	f240 8102 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000acc:	3802      	subs	r0, #2
 8000ace:	443c      	add	r4, r7
 8000ad0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad4:	eba4 040e 	sub.w	r4, r4, lr
 8000ad8:	2600      	movs	r6, #0
 8000ada:	b11d      	cbz	r5, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	b902      	cbnz	r2, 8000aee <__udivmoddi4+0xaa>
 8000aec:	deff      	udf	#255	; 0xff
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d150      	bne.n	8000b98 <__udivmoddi4+0x154>
 8000af6:	1bcb      	subs	r3, r1, r7
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	fa1f f887 	uxth.w	r8, r7
 8000b00:	2601      	movs	r6, #1
 8000b02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b06:	0c21      	lsrs	r1, r4, #16
 8000b08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b10:	fb08 f30c 	mul.w	r3, r8, ip
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000b18:	1879      	adds	r1, r7, r1
 8000b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0xe2>
 8000b20:	428b      	cmp	r3, r1
 8000b22:	f200 80e9 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b26:	4684      	mov	ip, r0
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	b2a3      	uxth	r3, r4
 8000b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b38:	fb08 f800 	mul.w	r8, r8, r0
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x10c>
 8000b40:	193c      	adds	r4, r7, r4
 8000b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x10a>
 8000b48:	45a0      	cmp	r8, r4
 8000b4a:	f200 80d9 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b4e:	4618      	mov	r0, r3
 8000b50:	eba4 0408 	sub.w	r4, r4, r8
 8000b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b58:	e7bf      	b.n	8000ada <__udivmoddi4+0x96>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0x12e>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	f000 80b1 	beq.w	8000cc6 <__udivmoddi4+0x282>
 8000b64:	2600      	movs	r6, #0
 8000b66:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f683 	clz	r6, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d14a      	bne.n	8000c10 <__udivmoddi4+0x1cc>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0x140>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80b8 	bhi.w	8000cf4 <__udivmoddi4+0x2b0>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0103 	sbc.w	r1, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d0a8      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b96:	e7a5      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b98:	f1c2 0320 	rsb	r3, r2, #32
 8000b9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ba0:	4097      	lsls	r7, r2
 8000ba2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ba6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000baa:	40d9      	lsrs	r1, r3
 8000bac:	4330      	orrs	r0, r6
 8000bae:	0c03      	lsrs	r3, r0, #16
 8000bb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bb4:	fa1f f887 	uxth.w	r8, r7
 8000bb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb06 f108 	mul.w	r1, r6, r8
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x19c>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bd2:	f080 808d 	bcs.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 808a 	bls.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b281      	uxth	r1, r0
 8000be4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf0:	fb00 f308 	mul.w	r3, r0, r8
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x1c4>
 8000bf8:	1879      	adds	r1, r7, r1
 8000bfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bfe:	d273      	bcs.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d971      	bls.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c04:	3802      	subs	r0, #2
 8000c06:	4439      	add	r1, r7
 8000c08:	1acb      	subs	r3, r1, r3
 8000c0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c0e:	e778      	b.n	8000b02 <__udivmoddi4+0xbe>
 8000c10:	f1c6 0c20 	rsb	ip, r6, #32
 8000c14:	fa03 f406 	lsl.w	r4, r3, r6
 8000c18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c1c:	431c      	orrs	r4, r3
 8000c1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c22:	fa01 f306 	lsl.w	r3, r1, r6
 8000c26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c36:	fa1f f884 	uxth.w	r8, r4
 8000c3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c42:	fb09 fa08 	mul.w	sl, r9, r8
 8000c46:	458a      	cmp	sl, r1
 8000c48:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x220>
 8000c52:	1861      	adds	r1, r4, r1
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	d248      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000c5a:	458a      	cmp	sl, r1
 8000c5c:	d946      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4421      	add	r1, r4
 8000c64:	eba1 010a 	sub.w	r1, r1, sl
 8000c68:	b2bf      	uxth	r7, r7
 8000c6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c76:	fb00 f808 	mul.w	r8, r0, r8
 8000c7a:	45b8      	cmp	r8, r7
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x24a>
 8000c7e:	19e7      	adds	r7, r4, r7
 8000c80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c84:	d22e      	bcs.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c86:	45b8      	cmp	r8, r7
 8000c88:	d92c      	bls.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4427      	add	r7, r4
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	eba7 0708 	sub.w	r7, r7, r8
 8000c96:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9a:	454f      	cmp	r7, r9
 8000c9c:	46c6      	mov	lr, r8
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	d31a      	bcc.n	8000cd8 <__udivmoddi4+0x294>
 8000ca2:	d017      	beq.n	8000cd4 <__udivmoddi4+0x290>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x27a>
 8000ca6:	ebb3 020e 	subs.w	r2, r3, lr
 8000caa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cb2:	40f2      	lsrs	r2, r6
 8000cb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb8:	40f7      	lsrs	r7, r6
 8000cba:	e9c5 2700 	strd	r2, r7, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e70b      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e9      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6fd      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd4:	4543      	cmp	r3, r8
 8000cd6:	d2e5      	bcs.n	8000ca4 <__udivmoddi4+0x260>
 8000cd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7df      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e7d2      	b.n	8000c8e <__udivmoddi4+0x24a>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e78d      	b.n	8000c08 <__udivmoddi4+0x1c4>
 8000cec:	4681      	mov	r9, r0
 8000cee:	e7b9      	b.n	8000c64 <__udivmoddi4+0x220>
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	e775      	b.n	8000be0 <__udivmoddi4+0x19c>
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e74a      	b.n	8000b8e <__udivmoddi4+0x14a>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	4439      	add	r1, r7
 8000cfe:	e713      	b.n	8000b28 <__udivmoddi4+0xe4>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	e724      	b.n	8000b50 <__udivmoddi4+0x10c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fe92 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f824 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 f8e6 	bl	8000ee8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d1c:	f000 f8b8 	bl	8000e90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d20:	f000 f888 	bl	8000e34 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000d24:	2220      	movs	r2, #32
 8000d26:	490b      	ldr	r1, [pc, #44]	; (8000d54 <main+0x48>)
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <main+0x4c>)
 8000d2a:	f003 fd47 	bl	80047bc <HAL_UART_Receive_IT>
	   inputchar = UARTRecieveIT();
 8000d2e:	f000 f94b 	bl	8000fc8 <UARTRecieveIT>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <main+0x50>)
 8000d38:	801a      	strh	r2, [r3, #0]
		//if input char == -1 ==> No New data
		if (inputchar != -1)
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <main+0x50>)
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d0ee      	beq.n	8000d24 <main+0x18>
		{
			Communication(inputchar);
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <main+0x50>)
 8000d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f96b 	bl	8001028 <Communication>
	  HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000d52:	e7e7      	b.n	8000d24 <main+0x18>
 8000d54:	20000048 	.word	0x20000048
 8000d58:	200000d4 	.word	0x200000d4
 8000d5c:	20000000 	.word	0x20000000

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f004 fa90 	bl	8005294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dde:	2304      	movs	r3, #4
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 ffe2 	bl	8003db0 <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df2:	f000 fcc7 	bl	8001784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2102      	movs	r1, #2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fa44 	bl	80042a0 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e1e:	f000 fcb1 	bl	8001784 <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <MX_I2C1_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e72:	f001 f9a3 	bl	80021bc <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 fc82 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000080 	.word	0x20000080
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	00061a80 	.word	0x00061a80

08000e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <MX_USART2_UART_Init+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000e9c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000ecc:	f003 fbe4 	bl	8004698 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 fc55 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000d4 	.word	0x200000d4
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a25      	ldr	r2, [pc, #148]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_GPIO_Init+0xd0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f74:	f001 f908 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_GPIO_Init+0xd8>)
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_GPIO_Init+0xdc>)
 8000f8e:	f000 ff77 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f92:	2320      	movs	r3, #32
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000faa:	f000 ff69 	bl	8001e80 <HAL_GPIO_Init>

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	10210000 	.word	0x10210000
 8000fc4:	40020800 	.word	0x40020800

08000fc8 <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
int16_t UARTRecieveIT()
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd2:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <UARTRecieveIT+0x54>)
 8000fd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <UARTRecieveIT+0x54>)
 8000fdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <UARTRecieveIT+0x58>)
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d010      	beq.n	800100c <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <UARTRecieveIT+0x58>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <UARTRecieveIT+0x5c>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <UARTRecieveIT+0x58>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <UARTRecieveIT+0x54>)
 8000ffc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000ffe:	fbb3 f1f2 	udiv	r1, r3, r2
 8001002:	fb02 f201 	mul.w	r2, r2, r1
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <UARTRecieveIT+0x58>)
 800100a:	6013      	str	r3, [r2, #0]
	}
	return data;
 800100c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	200000d4 	.word	0x200000d4
 8001020:	20000070 	.word	0x20000070
 8001024:	20000048 	.word	0x20000048

08001028 <Communication>:

void Communication(int16_t dataIn)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	static uint16_t parameter = 0;
	static uint8_t station[10] = {99,99,99,99,99,99,99,99,99,99};
	static uint8_t checksum = 0;
	static uint8_t check = 0;
	static uint8_t len = 0;
	test = 0;
 8001032:	4bb1      	ldr	r3, [pc, #708]	; (80012f8 <Communication+0x2d0>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	error = 0;
 8001038:	4bb0      	ldr	r3, [pc, #704]	; (80012fc <Communication+0x2d4>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	value = 0;
 800103e:	4bb0      	ldr	r3, [pc, #704]	; (8001300 <Communication+0x2d8>)
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
		State_CheckSum

	} STATE = State_StartMode;

	//State Machine
	  switch (STATE)
 8001046:	4baf      	ldr	r3, [pc, #700]	; (8001304 <Communication+0x2dc>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b04      	cmp	r3, #4
 800104c:	f200 8339 	bhi.w	80016c2 <Communication+0x69a>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <Communication+0x30>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	0800106d 	.word	0x0800106d
 800105c:	080011af 	.word	0x080011af
 8001060:	080011fd 	.word	0x080011fd
 8001064:	08001197 	.word	0x08001197
 8001068:	08001239 	.word	0x08001239
	  {
	  	  case State_StartMode :
	  		  switch (dataIn)
 800106c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001070:	3b91      	subs	r3, #145	; 0x91
 8001072:	2b0d      	cmp	r3, #13
 8001074:	f200 830a 	bhi.w	800168c <Communication+0x664>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <Communication+0x58>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	08001137 	.word	0x08001137
 8001084:	080010b9 	.word	0x080010b9
 8001088:	080010c7 	.word	0x080010c7
 800108c:	0800114b 	.word	0x0800114b
 8001090:	0800115f 	.word	0x0800115f
 8001094:	08001173 	.word	0x08001173
 8001098:	08001187 	.word	0x08001187
 800109c:	080010d5 	.word	0x080010d5
 80010a0:	080010e3 	.word	0x080010e3
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	080010ff 	.word	0x080010ff
 80010ac:	0800110d 	.word	0x0800110d
 80010b0:	0800111b 	.word	0x0800111b
 80010b4:	08001129 	.word	0x08001129
	  		  {
	  		  	  case 0b10010010 :
	  		  		  mode = 2;		//connect MCU #1
 80010b8:	4b93      	ldr	r3, [pc, #588]	; (8001308 <Communication+0x2e0>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 80010be:	4b91      	ldr	r3, [pc, #580]	; (8001304 <Communication+0x2dc>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80010c4:	e066      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10010011 :
	  		  		  mode = 3;		//disconnect MCU #1
 80010c6:	4b90      	ldr	r3, [pc, #576]	; (8001308 <Communication+0x2e0>)
 80010c8:	2203      	movs	r2, #3
 80010ca:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 80010cc:	4b8d      	ldr	r3, [pc, #564]	; (8001304 <Communication+0x2dc>)
 80010ce:	2204      	movs	r2, #4
 80010d0:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80010d2:	e05f      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10011000 :
	  		  		  mode = 8;		//go to station/goal position #1
 80010d4:	4b8c      	ldr	r3, [pc, #560]	; (8001308 <Communication+0x2e0>)
 80010d6:	2208      	movs	r2, #8
 80010d8:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 80010da:	4b8a      	ldr	r3, [pc, #552]	; (8001304 <Communication+0x2dc>)
 80010dc:	2204      	movs	r2, #4
 80010de:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80010e0:	e058      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10011001 :
	  		  		  mode = 9;		//request current station #1
 80010e2:	4b89      	ldr	r3, [pc, #548]	; (8001308 <Communication+0x2e0>)
 80010e4:	2209      	movs	r2, #9
 80010e6:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 80010e8:	4b86      	ldr	r3, [pc, #536]	; (8001304 <Communication+0x2dc>)
 80010ea:	2204      	movs	r2, #4
 80010ec:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80010ee:	e051      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10011010 :
	  		  		  mode = 10;	//request angular position #1
 80010f0:	4b85      	ldr	r3, [pc, #532]	; (8001308 <Communication+0x2e0>)
 80010f2:	220a      	movs	r2, #10
 80010f4:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 80010f6:	4b83      	ldr	r3, [pc, #524]	; (8001304 <Communication+0x2dc>)
 80010f8:	2204      	movs	r2, #4
 80010fa:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80010fc:	e04a      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10011011 :
	  		  		  mode = 11;	//request max angular velocity #1
 80010fe:	4b82      	ldr	r3, [pc, #520]	; (8001308 <Communication+0x2e0>)
 8001100:	220b      	movs	r2, #11
 8001102:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8001104:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <Communication+0x2dc>)
 8001106:	2204      	movs	r2, #4
 8001108:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 800110a:	e043      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10011100 :
	  		  		  mode = 12;	//enable gripper #1
 800110c:	4b7e      	ldr	r3, [pc, #504]	; (8001308 <Communication+0x2e0>)
 800110e:	220c      	movs	r2, #12
 8001110:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8001112:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <Communication+0x2dc>)
 8001114:	2204      	movs	r2, #4
 8001116:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001118:	e03c      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10011101 :
	  		  		  mode = 13;	//disable gripper #1
 800111a:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <Communication+0x2e0>)
 800111c:	220d      	movs	r2, #13
 800111e:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8001120:	4b78      	ldr	r3, [pc, #480]	; (8001304 <Communication+0x2dc>)
 8001122:	2204      	movs	r2, #4
 8001124:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001126:	e035      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10011110 :
	  		  		  mode = 14;	//set home #1
 8001128:	4b77      	ldr	r3, [pc, #476]	; (8001308 <Communication+0x2e0>)
 800112a:	220e      	movs	r2, #14
 800112c:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 800112e:	4b75      	ldr	r3, [pc, #468]	; (8001304 <Communication+0x2dc>)
 8001130:	2204      	movs	r2, #4
 8001132:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001134:	e02e      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10010001 :
	  		  		  mode = 1;		//test command #2
 8001136:	4b74      	ldr	r3, [pc, #464]	; (8001308 <Communication+0x2e0>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 800113c:	4b73      	ldr	r3, [pc, #460]	; (800130c <Communication+0x2e4>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 8001142:	4b70      	ldr	r3, [pc, #448]	; (8001304 <Communication+0x2dc>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001148:	e024      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10010100 :
	  		  		  mode = 4;		//set angular velocity #2
 800114a:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <Communication+0x2e0>)
 800114c:	2204      	movs	r2, #4
 800114e:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 8001150:	4b6e      	ldr	r3, [pc, #440]	; (800130c <Communication+0x2e4>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 8001156:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <Communication+0x2dc>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 800115c:	e01a      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10010101 :
	  		  		  mode = 5;		//set angular position #2
 800115e:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <Communication+0x2e0>)
 8001160:	2205      	movs	r2, #5
 8001162:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 8001164:	4b69      	ldr	r3, [pc, #420]	; (800130c <Communication+0x2e4>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 800116a:	4b66      	ldr	r3, [pc, #408]	; (8001304 <Communication+0x2dc>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001170:	e010      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10010110 :
	  		  		  mode = 6;		//set goal 1 station #2
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <Communication+0x2e0>)
 8001174:	2206      	movs	r2, #6
 8001176:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 8001178:	4b64      	ldr	r3, [pc, #400]	; (800130c <Communication+0x2e4>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 800117e:	4b61      	ldr	r3, [pc, #388]	; (8001304 <Communication+0x2dc>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001184:	e006      	b.n	8001194 <Communication+0x16c>

	  		  	  case 0b10010111 :
	  		  		  mode = 7;		//set goal n station #3
 8001186:	4b60      	ldr	r3, [pc, #384]	; (8001308 <Communication+0x2e0>)
 8001188:	2207      	movs	r2, #7
 800118a:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_Len;
 800118c:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <Communication+0x2dc>)
 800118e:	2203      	movs	r2, #3
 8001190:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001192:	bf00      	nop
	  		  }
	  		  break;
 8001194:	e27a      	b.n	800168c <Communication+0x664>

	  	  case State_Len :
	  		len = dataIn;
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <Communication+0x2e8>)
 800119c:	701a      	strb	r2, [r3, #0]
	  		n = dataIn;
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b5a      	ldr	r3, [pc, #360]	; (800130c <Communication+0x2e4>)
 80011a4:	701a      	strb	r2, [r3, #0]
	  		STATE = State_CollectData_3;
 80011a6:	4b57      	ldr	r3, [pc, #348]	; (8001304 <Communication+0x2dc>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	701a      	strb	r2, [r3, #0]
	  		break;
 80011ac:	e289      	b.n	80016c2 <Communication+0x69a>

	  	  case State_CollectData_2 :
	  		check += dataIn;
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <Communication+0x2ec>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b56      	ldr	r3, [pc, #344]	; (8001314 <Communication+0x2ec>)
 80011bc:	701a      	strb	r2, [r3, #0]
	  		parameter |= (dataIn & 0xFF) << (8*n);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b52      	ldr	r3, [pc, #328]	; (800130c <Communication+0x2e4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b52      	ldr	r3, [pc, #328]	; (8001318 <Communication+0x2f0>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <Communication+0x2f0>)
 80011dc:	801a      	strh	r2, [r3, #0]
	  		if (n == 0)
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <Communication+0x2e4>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d103      	bne.n	80011ee <Communication+0x1c6>
	  		{
	  			STATE = State_CheckSum;
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <Communication+0x2dc>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	701a      	strb	r2, [r3, #0]
	  			break;
 80011ec:	e269      	b.n	80016c2 <Communication+0x69a>
	  		}
	  		n -= 1;
 80011ee:	4b47      	ldr	r3, [pc, #284]	; (800130c <Communication+0x2e4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <Communication+0x2e4>)
 80011f8:	701a      	strb	r2, [r3, #0]
	  		break;
 80011fa:	e262      	b.n	80016c2 <Communication+0x69a>

	  	  case State_CollectData_3 :
	  		n -= 1;
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <Communication+0x2e4>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <Communication+0x2e4>)
 8001206:	701a      	strb	r2, [r3, #0]
	  		check += dataIn;
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b41      	ldr	r3, [pc, #260]	; (8001314 <Communication+0x2ec>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4413      	add	r3, r2
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <Communication+0x2ec>)
 8001216:	701a      	strb	r2, [r3, #0]
	  		station[n] = dataIn;
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <Communication+0x2e4>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	b2d9      	uxtb	r1, r3
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <Communication+0x2f4>)
 8001224:	5499      	strb	r1, [r3, r2]
	  		if (n == 0)
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <Communication+0x2e4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 8230 	bne.w	8001690 <Communication+0x668>
	  		{
	  			STATE = State_CheckSum;
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <Communication+0x2dc>)
 8001232:	2204      	movs	r2, #4
 8001234:	701a      	strb	r2, [r3, #0]
	  			break;
 8001236:	e244      	b.n	80016c2 <Communication+0x69a>
	  		}
	  		break;

	  	  case State_CheckSum :
	  		  switch (mode)
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <Communication+0x2e0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	2b0d      	cmp	r3, #13
 8001240:	f200 823f 	bhi.w	80016c2 <Communication+0x69a>
 8001244:	a201      	add	r2, pc, #4	; (adr r2, 800124c <Communication+0x224>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	08001285 	.word	0x08001285
 8001250:	080012c5 	.word	0x080012c5
 8001254:	08001329 	.word	0x08001329
 8001258:	0800135b 	.word	0x0800135b
 800125c:	080013af 	.word	0x080013af
 8001260:	08001415 	.word	0x08001415
 8001264:	08001467 	.word	0x08001467
 8001268:	080014cd 	.word	0x080014cd
 800126c:	08001503 	.word	0x08001503
 8001270:	0800153f 	.word	0x0800153f
 8001274:	0800157b 	.word	0x0800157b
 8001278:	080015b7 	.word	0x080015b7
 800127c:	08001625 	.word	0x08001625
 8001280:	08001659 	.word	0x08001659
	  		  {
	  		  	  case 1 :	//test command #2
	  		  		  checksum = ~(0b10010001 + check);
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <Communication+0x2ec>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3b6f      	subs	r3, #111	; 0x6f
 800128a:	b2db      	uxtb	r3, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <Communication+0x2f8>)
 8001292:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 8001294:	f000 fa24 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <Communication+0x2dc>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 800129e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a2:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <Communication+0x2f8>)
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d003      	beq.n	80012b2 <Communication+0x28a>
	  		  		  {
	  		  			  error = 1;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <Communication+0x2d4>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  //blabla
	  		  			  test = 1;
	  		  		  }
	  		  		  break;
 80012b0:	e1f0      	b.n	8001694 <Communication+0x66c>
	  		  		  else if (connect == 1)
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <Communication+0x2fc>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f040 81ec 	bne.w	8001694 <Communication+0x66c>
	  		  			  test = 1;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <Communication+0x2d0>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80012c2:	e1e7      	b.n	8001694 <Communication+0x66c>

	  		  	  case 2 : //connect MCU #1
	  		  		  checksum = ~(0b10010010);
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <Communication+0x2f8>)
 80012c6:	226d      	movs	r2, #109	; 0x6d
 80012c8:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 80012ca:	f000 fa09 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <Communication+0x2dc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 80012d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d8:	4a11      	ldr	r2, [pc, #68]	; (8001320 <Communication+0x2f8>)
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	4293      	cmp	r3, r2
 80012de:	d003      	beq.n	80012e8 <Communication+0x2c0>
	  		  		  {
	  		  			  error = 1;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <Communication+0x2d4>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  connect = 1;
	  		  			  test = 2;
	  		  		  }
	  		  		  break;
 80012e6:	e1ec      	b.n	80016c2 <Communication+0x69a>
	  		  			  connect = 1;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <Communication+0x2fc>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
	  		  			  test = 2;
 80012ee:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <Communication+0x2d0>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80012f4:	e1e5      	b.n	80016c2 <Communication+0x69a>
 80012f6:	bf00      	nop
 80012f8:	20000068 	.word	0x20000068
 80012fc:	20000069 	.word	0x20000069
 8001300:	2000006c 	.word	0x2000006c
 8001304:	20000074 	.word	0x20000074
 8001308:	20000075 	.word	0x20000075
 800130c:	20000076 	.word	0x20000076
 8001310:	20000077 	.word	0x20000077
 8001314:	20000078 	.word	0x20000078
 8001318:	2000007a 	.word	0x2000007a
 800131c:	20000010 	.word	0x20000010
 8001320:	2000007c 	.word	0x2000007c
 8001324:	2000000e 	.word	0x2000000e

	  		  	  case 3 : //disconnect MCU #1
	  		  		  checksum = ~(0b10010011);
 8001328:	4baf      	ldr	r3, [pc, #700]	; (80015e8 <Communication+0x5c0>)
 800132a:	226c      	movs	r2, #108	; 0x6c
 800132c:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 800132e:	f000 f9d7 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 8001332:	4bae      	ldr	r3, [pc, #696]	; (80015ec <Communication+0x5c4>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8001338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133c:	4aaa      	ldr	r2, [pc, #680]	; (80015e8 <Communication+0x5c0>)
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	4293      	cmp	r3, r2
 8001342:	d003      	beq.n	800134c <Communication+0x324>
	  		  		  {
	  		  			  error = 1;
 8001344:	4baa      	ldr	r3, [pc, #680]	; (80015f0 <Communication+0x5c8>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
	  		  		  {
	  		  			  connect = 0;
	  		  			  test = 3;
	  		  		  }

	  		  		  break;
 800134a:	e1ba      	b.n	80016c2 <Communication+0x69a>
	  		  			  connect = 0;
 800134c:	4ba9      	ldr	r3, [pc, #676]	; (80015f4 <Communication+0x5cc>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
	  		  			  test = 3;
 8001352:	4ba9      	ldr	r3, [pc, #676]	; (80015f8 <Communication+0x5d0>)
 8001354:	2203      	movs	r2, #3
 8001356:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001358:	e1b3      	b.n	80016c2 <Communication+0x69a>

	  		  	  case 4 : //set angular velocity #2
	  		  		  checksum = ~(0b10010100 + check);
 800135a:	4ba8      	ldr	r3, [pc, #672]	; (80015fc <Communication+0x5d4>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3b6c      	subs	r3, #108	; 0x6c
 8001360:	b2db      	uxtb	r3, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <Communication+0x5c0>)
 8001368:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 800136a:	f000 f9b9 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 800136e:	4b9f      	ldr	r3, [pc, #636]	; (80015ec <Communication+0x5c4>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8001374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001378:	4a9b      	ldr	r2, [pc, #620]	; (80015e8 <Communication+0x5c0>)
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	4293      	cmp	r3, r2
 800137e:	d004      	beq.n	800138a <Communication+0x362>
	  		  		  {
	  		  			  error = dataIn;
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b9a      	ldr	r3, [pc, #616]	; (80015f0 <Communication+0x5c8>)
 8001386:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
		  		  		  value = parameter;
	  		  			  test = 4;
	  		  		  }
	  		  		  break;
 8001388:	e186      	b.n	8001698 <Communication+0x670>
	  		  		  else if (connect == 1)
 800138a:	4b9a      	ldr	r3, [pc, #616]	; (80015f4 <Communication+0x5cc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 8182 	bne.w	8001698 <Communication+0x670>
		  		  		  value = parameter;
 8001394:	4b9a      	ldr	r3, [pc, #616]	; (8001600 <Communication+0x5d8>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a0:	4b98      	ldr	r3, [pc, #608]	; (8001604 <Communication+0x5dc>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
	  		  			  test = 4;
 80013a6:	4b94      	ldr	r3, [pc, #592]	; (80015f8 <Communication+0x5d0>)
 80013a8:	2204      	movs	r2, #4
 80013aa:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80013ac:	e174      	b.n	8001698 <Communication+0x670>

	  		  	  case 5 : //set angular position #2
	  		  		  checksum = ~(0b10010101 + check);
 80013ae:	4b93      	ldr	r3, [pc, #588]	; (80015fc <Communication+0x5d4>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3b6b      	subs	r3, #107	; 0x6b
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <Communication+0x5c0>)
 80013bc:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 80013be:	f000 f98f 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 80013c2:	4b8a      	ldr	r3, [pc, #552]	; (80015ec <Communication+0x5c4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	4a86      	ldr	r2, [pc, #536]	; (80015e8 <Communication+0x5c0>)
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d003      	beq.n	80013dc <Communication+0x3b4>
	  		  		  {
	  		  			  error = 1;
 80013d4:	4b86      	ldr	r3, [pc, #536]	; (80015f0 <Communication+0x5c8>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
		  		  		  value = parameter/10000.0;
	  		  			  test = 5;
	  		  		  }
	  		  		  break;
 80013da:	e15f      	b.n	800169c <Communication+0x674>
	  		  		  else if (connect == 1)
 80013dc:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <Communication+0x5cc>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	f040 815b 	bne.w	800169c <Communication+0x674>
		  		  		  value = parameter/10000.0;
 80013e6:	4b86      	ldr	r3, [pc, #536]	; (8001600 <Communication+0x5d8>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f846 	bl	800047c <__aeabi_i2d>
 80013f0:	a37b      	add	r3, pc, #492	; (adr r3, 80015e0 <Communication+0x5b8>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f9d5 	bl	80007a4 <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fab7 	bl	8000974 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	4a7e      	ldr	r2, [pc, #504]	; (8001604 <Communication+0x5dc>)
 800140a:	6013      	str	r3, [r2, #0]
	  		  			  test = 5;
 800140c:	4b7a      	ldr	r3, [pc, #488]	; (80015f8 <Communication+0x5d0>)
 800140e:	2205      	movs	r2, #5
 8001410:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001412:	e143      	b.n	800169c <Communication+0x674>

	  		  	  case 6 : //set goal 1 station #2
	  		  		  checksum = ~(0b10010110 + check);
 8001414:	4b79      	ldr	r3, [pc, #484]	; (80015fc <Communication+0x5d4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3b6a      	subs	r3, #106	; 0x6a
 800141a:	b2db      	uxtb	r3, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <Communication+0x5c0>)
 8001422:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 8001424:	f000 f95c 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 8001428:	4b70      	ldr	r3, [pc, #448]	; (80015ec <Communication+0x5c4>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	4a6d      	ldr	r2, [pc, #436]	; (80015e8 <Communication+0x5c0>)
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4293      	cmp	r3, r2
 8001438:	d003      	beq.n	8001442 <Communication+0x41a>
	  		  		  {
	  		  			  error = 1;
 800143a:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <Communication+0x5c8>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
		  		  		  value = parameter;
	  		  			  test = 6;
	  		  		  }
	  		  		  break;
 8001440:	e12e      	b.n	80016a0 <Communication+0x678>
	  		  		  else if (connect == 1)
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <Communication+0x5cc>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	f040 812a 	bne.w	80016a0 <Communication+0x678>
		  		  		  value = parameter;
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <Communication+0x5d8>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <Communication+0x5dc>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
	  		  			  test = 6;
 800145e:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <Communication+0x5d0>)
 8001460:	2206      	movs	r2, #6
 8001462:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001464:	e11c      	b.n	80016a0 <Communication+0x678>

	  		  	  case 7 : //set goal n station #3
	  		  		  checksum = ~(0b10010111 + len + check);
 8001466:	4b68      	ldr	r3, [pc, #416]	; (8001608 <Communication+0x5e0>)
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	4b64      	ldr	r3, [pc, #400]	; (80015fc <Communication+0x5d4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3b69      	subs	r3, #105	; 0x69
 8001474:	b2db      	uxtb	r3, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <Communication+0x5c0>)
 800147c:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 800147e:	f000 f92f 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 8001482:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <Communication+0x5c4>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8001488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148c:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <Communication+0x5c0>)
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	4293      	cmp	r3, r2
 8001492:	d003      	beq.n	800149c <Communication+0x474>
	  		  		  {
	  		  			  error = 1;
 8001494:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <Communication+0x5c8>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
						  {
							  nstation[len - i - 1] = station[i];
						  }
	  		  			  test = 7;
	  		  		  }
	  		  		  break;
 800149a:	e103      	b.n	80016a4 <Communication+0x67c>
	  		  		  else if (connect == 1)
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <Communication+0x5cc>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f040 80ff 	bne.w	80016a4 <Communication+0x67c>
	  		  			 for (uint8_t i = len - 1 ; i >= 0 ; i--)
 80014a6:	4b58      	ldr	r3, [pc, #352]	; (8001608 <Communication+0x5e0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
							  nstation[len - i - 1] = station[i];
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	4b55      	ldr	r3, [pc, #340]	; (8001608 <Communication+0x5e0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	1acb      	subs	r3, r1, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	4953      	ldr	r1, [pc, #332]	; (800160c <Communication+0x5e4>)
 80014be:	5c89      	ldrb	r1, [r1, r2]
 80014c0:	4a53      	ldr	r2, [pc, #332]	; (8001610 <Communication+0x5e8>)
 80014c2:	54d1      	strb	r1, [r2, r3]
	  		  			 for (uint8_t i = len - 1 ; i >= 0 ; i--)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
							  nstation[len - i - 1] = station[i];
 80014ca:	e7f0      	b.n	80014ae <Communication+0x486>

	  		  	  case 8 : //go to station/goal position #1
	  		  		  checksum = ~(0b10011000);
 80014cc:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <Communication+0x5c0>)
 80014ce:	2267      	movs	r2, #103	; 0x67
 80014d0:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 80014d2:	f000 f905 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 80014d6:	4b45      	ldr	r3, [pc, #276]	; (80015ec <Communication+0x5c4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 80014dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e0:	4a41      	ldr	r2, [pc, #260]	; (80015e8 <Communication+0x5c0>)
 80014e2:	7812      	ldrb	r2, [r2, #0]
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d003      	beq.n	80014f0 <Communication+0x4c8>
	  		  		  {
	  		  			  error = 1;
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <Communication+0x5c8>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  //blabla
	  		  			  test = 8;
	  		  		  }
	  		  		  break;
 80014ee:	e0db      	b.n	80016a8 <Communication+0x680>
	  		  		  else if (connect == 1)
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <Communication+0x5cc>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	f040 80d7 	bne.w	80016a8 <Communication+0x680>
	  		  			  test = 8;
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <Communication+0x5d0>)
 80014fc:	2208      	movs	r2, #8
 80014fe:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001500:	e0d2      	b.n	80016a8 <Communication+0x680>

	  		  	  case 9 : //request current station #1
	  		  		  checksum = ~(0b10011001);
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <Communication+0x5c0>)
 8001504:	2266      	movs	r2, #102	; 0x66
 8001506:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 8001508:	f000 f8ea 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <Communication+0x5c4>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	4a34      	ldr	r2, [pc, #208]	; (80015e8 <Communication+0x5c0>)
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	4293      	cmp	r3, r2
 800151c:	d003      	beq.n	8001526 <Communication+0x4fe>
	  		  		  {
	  		  			  error = 1;
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <Communication+0x5c8>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  request(9);
	  		  			  test = 9;
	  		  		  }
	  		  		  break;
 8001524:	e0c2      	b.n	80016ac <Communication+0x684>
	  		  		  else if (connect == 1)
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <Communication+0x5cc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	f040 80be 	bne.w	80016ac <Communication+0x684>
	  		  			  request(9);
 8001530:	2009      	movs	r0, #9
 8001532:	f000 f8e3 	bl	80016fc <request>
	  		  			  test = 9;
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <Communication+0x5d0>)
 8001538:	2209      	movs	r2, #9
 800153a:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 800153c:	e0b6      	b.n	80016ac <Communication+0x684>

	  		  	  case 10 : //request angular position #1
	  		  		  checksum = ~(0b10011010);
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <Communication+0x5c0>)
 8001540:	2265      	movs	r2, #101	; 0x65
 8001542:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 8001544:	f000 f8cc 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <Communication+0x5c4>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	4a25      	ldr	r2, [pc, #148]	; (80015e8 <Communication+0x5c0>)
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	4293      	cmp	r3, r2
 8001558:	d003      	beq.n	8001562 <Communication+0x53a>
	  		  		  {
	  		  			  error = 1;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <Communication+0x5c8>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  request(10);
	  		  			  test = 10;
	  		  		  }
	  		  		  break;
 8001560:	e0a6      	b.n	80016b0 <Communication+0x688>
	  		  		  else if (connect == 1)
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <Communication+0x5cc>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	f040 80a2 	bne.w	80016b0 <Communication+0x688>
	  		  			  request(10);
 800156c:	200a      	movs	r0, #10
 800156e:	f000 f8c5 	bl	80016fc <request>
	  		  			  test = 10;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <Communication+0x5d0>)
 8001574:	220a      	movs	r2, #10
 8001576:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001578:	e09a      	b.n	80016b0 <Communication+0x688>

	  		  	  case 11 : //request max angular velocity #1
	  		  		  checksum = ~(0b10011011);
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <Communication+0x5c0>)
 800157c:	2264      	movs	r2, #100	; 0x64
 800157e:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 8001580:	f000 f8ae 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <Communication+0x5c4>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <Communication+0x5c0>)
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <Communication+0x576>
	  		  		  {
	  		  			  error = 1;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <Communication+0x5c8>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  request(11);
	  		  			  test = 11;
	  		  		  }
	  		  		  break;
 800159c:	e08a      	b.n	80016b4 <Communication+0x68c>
	  		  		  else if (connect == 1)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <Communication+0x5cc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f040 8086 	bne.w	80016b4 <Communication+0x68c>
	  		  			  request(11);
 80015a8:	200b      	movs	r0, #11
 80015aa:	f000 f8a7 	bl	80016fc <request>
	  		  			  test = 11;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <Communication+0x5d0>)
 80015b0:	220b      	movs	r2, #11
 80015b2:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80015b4:	e07e      	b.n	80016b4 <Communication+0x68c>

	  		  	  case 12 : //enable gripper #1
	  		  		  checksum = ~(0b10011100);
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <Communication+0x5c0>)
 80015b8:	2263      	movs	r2, #99	; 0x63
 80015ba:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 80015bc:	f000 f890 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <Communication+0x5c4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <Communication+0x5c0>)
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d020      	beq.n	8001614 <Communication+0x5ec>
	  		  		  {
	  		  			  error = 1;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <Communication+0x5c8>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  //blabla
	  		  			  test = 12;
	  		  		  }
	  		  		  break;
 80015d8:	e06e      	b.n	80016b8 <Communication+0x690>
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40c38800 	.word	0x40c38800
 80015e8:	2000007c 	.word	0x2000007c
 80015ec:	20000074 	.word	0x20000074
 80015f0:	20000069 	.word	0x20000069
 80015f4:	2000000e 	.word	0x2000000e
 80015f8:	20000068 	.word	0x20000068
 80015fc:	20000078 	.word	0x20000078
 8001600:	2000007a 	.word	0x2000007a
 8001604:	2000006c 	.word	0x2000006c
 8001608:	20000077 	.word	0x20000077
 800160c:	20000010 	.word	0x20000010
 8001610:	20000004 	.word	0x20000004
	  		  		  else if (connect == 1)
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <Communication+0x6a4>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d14d      	bne.n	80016b8 <Communication+0x690>
	  		  			  test = 12;
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <Communication+0x6a8>)
 800161e:	220c      	movs	r2, #12
 8001620:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001622:	e049      	b.n	80016b8 <Communication+0x690>

	  		  	  case 13 : //disable gripper #1
	  		  		  checksum = ~(0b10011101);
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <Communication+0x6ac>)
 8001626:	2262      	movs	r2, #98	; 0x62
 8001628:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 800162a:	f000 f859 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <Communication+0x6b0>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8001634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001638:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <Communication+0x6ac>)
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	4293      	cmp	r3, r2
 800163e:	d003      	beq.n	8001648 <Communication+0x620>
	  		  		  {
	  		  			  error = 1;
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <Communication+0x6b4>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  //blabla
	  		  			  test = 13;
	  		  		  }
	  		  		  break;
 8001646:	e039      	b.n	80016bc <Communication+0x694>
	  		  		  else if (connect == 1)
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <Communication+0x6a4>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d135      	bne.n	80016bc <Communication+0x694>
	  		  			  test = 13;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <Communication+0x6a8>)
 8001652:	220d      	movs	r2, #13
 8001654:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8001656:	e031      	b.n	80016bc <Communication+0x694>

	  		  	  case 14 : //set home #1
	  		  		  checksum = ~(0b10011110);
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <Communication+0x6ac>)
 800165a:	2261      	movs	r2, #97	; 0x61
 800165c:	701a      	strb	r2, [r3, #0]
	  		  		  ACK1();
 800165e:	f000 f83f 	bl	80016e0 <ACK1>
	  		  		  STATE = State_StartMode;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <Communication+0x6b0>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <Communication+0x6ac>)
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	4293      	cmp	r3, r2
 8001672:	d003      	beq.n	800167c <Communication+0x654>
	  		  		  {
	  		  			  error = 1;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <Communication+0x6b4>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
	  		  		  else if (connect == 1)
	  		  		  {
	  		  			  //sethome = 1;
	  		  			  test = 14;
	  		  		  }
	  		  		  break;
 800167a:	e021      	b.n	80016c0 <Communication+0x698>
	  		  		  else if (connect == 1)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <Communication+0x6a4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d11d      	bne.n	80016c0 <Communication+0x698>
	  		  			  test = 14;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <Communication+0x6a8>)
 8001686:	220e      	movs	r2, #14
 8001688:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 800168a:	e019      	b.n	80016c0 <Communication+0x698>
	  		  break;
 800168c:	bf00      	nop
 800168e:	e018      	b.n	80016c2 <Communication+0x69a>
	  		break;
 8001690:	bf00      	nop
 8001692:	e016      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 8001694:	bf00      	nop
 8001696:	e014      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 8001698:	bf00      	nop
 800169a:	e012      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 800169c:	bf00      	nop
 800169e:	e010      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016a0:	bf00      	nop
 80016a2:	e00e      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016a4:	bf00      	nop
 80016a6:	e00c      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016a8:	bf00      	nop
 80016aa:	e00a      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016ac:	bf00      	nop
 80016ae:	e008      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016b0:	bf00      	nop
 80016b2:	e006      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016b4:	bf00      	nop
 80016b6:	e004      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016b8:	bf00      	nop
 80016ba:	e002      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016bc:	bf00      	nop
 80016be:	e000      	b.n	80016c2 <Communication+0x69a>
	  		  		  break;
 80016c0:	bf00      	nop
	  		  }
	  }
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000000e 	.word	0x2000000e
 80016d0:	20000068 	.word	0x20000068
 80016d4:	2000007c 	.word	0x2000007c
 80016d8:	20000074 	.word	0x20000074
 80016dc:	20000069 	.word	0x20000069

080016e0 <ACK1>:

void ACK1()
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	static uint8_t ack1[2] = {0x58,0b01110101};
	HAL_UART_Transmit_IT(&huart2, ack1, 2);
 80016e4:	2202      	movs	r2, #2
 80016e6:	4903      	ldr	r1, [pc, #12]	; (80016f4 <ACK1+0x14>)
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <ACK1+0x18>)
 80016ea:	f003 f822 	bl	8004732 <HAL_UART_Transmit_IT>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000001c 	.word	0x2000001c
 80016f8:	200000d4 	.word	0x200000d4

080016fc <request>:
	static uint8_t ack2[2] = {70,110};
	HAL_UART_Transmit_IT(&huart2, ack2, 2);
}

void request(uint8_t mode)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	if (mode == 9)		//request current station >> #2
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d10e      	bne.n	800172a <request+0x2e>
	{
		uint8_t requested[] = {0b10011001, 0b00, 0b00, 0b00};
 800170c:	2399      	movs	r3, #153	; 0x99
 800170e:	617b      	str	r3, [r7, #20]
		//requested[2] = velocity;
		requested[3] = ~(0b10011001 + requested[2]);
 8001710:	7dbb      	ldrb	r3, [r7, #22]
 8001712:	3b67      	subs	r3, #103	; 0x67
 8001714:	b2db      	uxtb	r3, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_IT(&huart2, requested, 4);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2204      	movs	r2, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4816      	ldr	r0, [pc, #88]	; (8001780 <request+0x84>)
 8001726:	f003 f804 	bl	8004732 <HAL_UART_Transmit_IT>
	}

	if (mode == 10)		//request angular position >> #2
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b0a      	cmp	r3, #10
 800172e:	d111      	bne.n	8001754 <request+0x58>
	{
		uint8_t requested[] = {0b10011010, 0b00, 0b00, 0b00};
 8001730:	239a      	movs	r3, #154	; 0x9a
 8001732:	613b      	str	r3, [r7, #16]
		//requested[1] = velocity >> 8;
		//requested[2] = velocity;
		requested[3] = ~(0b10011010 + requested[1] + requested[2]);
 8001734:	7c7a      	ldrb	r2, [r7, #17]
 8001736:	7cbb      	ldrb	r3, [r7, #18]
 8001738:	4413      	add	r3, r2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	3b66      	subs	r3, #102	; 0x66
 800173e:	b2db      	uxtb	r3, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	74fb      	strb	r3, [r7, #19]
		HAL_UART_Transmit_IT(&huart2, requested, 4);
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <request+0x84>)
 8001750:	f002 ffef 	bl	8004732 <HAL_UART_Transmit_IT>
	}

	if (mode == 11)		//request max angular velocity >> #2
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b0b      	cmp	r3, #11
 8001758:	d10e      	bne.n	8001778 <request+0x7c>
	{
		uint8_t requested[] = {0b10011011, 0b00, 0b00, 0b00};
 800175a:	239b      	movs	r3, #155	; 0x9b
 800175c:	60fb      	str	r3, [r7, #12]
		//requested[2] = velocity;
		requested[3] = ~(0b10011011 + requested[2]);
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	3b65      	subs	r3, #101	; 0x65
 8001762:	b2db      	uxtb	r3, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_IT(&huart2, requested, 4);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	2204      	movs	r2, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <request+0x84>)
 8001774:	f002 ffdd 	bl	8004732 <HAL_UART_Transmit_IT>
	}
}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200000d4 	.word	0x200000d4

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_MspInit+0x4c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ce:	2007      	movs	r0, #7
 80017d0:	f000 fa74 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <HAL_I2C_MspInit+0xa4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d13b      	bne.n	800187a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182e:	2304      	movs	r3, #4
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4814      	ldr	r0, [pc, #80]	; (800188c <HAL_I2C_MspInit+0xac>)
 800183a:	f000 fb21 	bl	8001e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	201f      	movs	r0, #31
 8001860:	f000 fa37 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001864:	201f      	movs	r0, #31
 8001866:	f000 fa50 	bl	8001d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2020      	movs	r0, #32
 8001870:	f000 fa2f 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001874:	2020      	movs	r0, #32
 8001876:	f000 fa48 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40005400 	.word	0x40005400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020400 	.word	0x40020400

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_UART_MspInit+0x94>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d133      	bne.n	800191a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_UART_MspInit+0x98>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_UART_MspInit+0x98>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_UART_MspInit+0x98>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_UART_MspInit+0x98>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_UART_MspInit+0x98>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_UART_MspInit+0x98>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ea:	230c      	movs	r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4809      	ldr	r0, [pc, #36]	; (800192c <HAL_UART_MspInit+0x9c>)
 8001906:	f000 fabb 	bl	8001e80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2026      	movs	r0, #38	; 0x26
 8001910:	f000 f9df 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001914:	2026      	movs	r0, #38	; 0x26
 8001916:	f000 f9f8 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40004400 	.word	0x40004400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler+0x4>

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 f8ae 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <I2C1_EV_IRQHandler+0x10>)
 800198a:	f000 fd5b 	bl	8002444 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000080 	.word	0x20000080

08001998 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <I2C1_ER_IRQHandler+0x10>)
 800199e:	f000 febe 	bl	800271e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000080 	.word	0x20000080

080019ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <USART2_IRQHandler+0x10>)
 80019b2:	f002 ff33 	bl	800481c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000d4 	.word	0x200000d4

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ffd7 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f003 fc1b 	bl	800524c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff f979 	bl	8000d0c <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001a28:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8001a2c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001a30:	2000011c 	.word	0x2000011c

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f92b 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fe90 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f943 	bl	8001d26 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f90b 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000020 	.word	0x20000020
 8001ad4:	20000028 	.word	0x20000028
 8001ad8:	20000024 	.word	0x20000024

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000028 	.word	0x20000028
 8001b00:	20000118 	.word	0x20000118

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000118 	.word	0x20000118

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff29 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff3e 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff8e 	bl	8001c10 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff31 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff feda 	bl	8001b04 <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d008      	beq.n	8001d70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e052      	b.n	8001e16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0216 	bic.w	r2, r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <HAL_DMA_Abort+0x62>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0208 	bic.w	r2, r2, #8
 8001dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc0:	e013      	b.n	8001dea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc2:	f7ff fe9f 	bl	8001b04 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d90c      	bls.n	8001dea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e015      	b.n	8001e16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e4      	bne.n	8001dc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfc:	223f      	movs	r2, #63	; 0x3f
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d004      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e00c      	b.n	8001e56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2205      	movs	r2, #5
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e159      	b.n	8002150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8148 	bne.w	800214a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a2 	beq.w	800214a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b54      	ldr	r3, [pc, #336]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x202>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x1fe>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_GPIO_Init+0x2f8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x1fa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a46      	ldr	r2, [pc, #280]	; (800217c <HAL_GPIO_Init+0x2fc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x1f6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a45      	ldr	r2, [pc, #276]	; (8002180 <HAL_GPIO_Init+0x300>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x1f2>
 800206e:	2304      	movs	r3, #4
 8002070:	e008      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002072:	2307      	movs	r3, #7
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002076:	2303      	movs	r3, #3
 8002078:	e004      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207a:	2302      	movs	r3, #2
 800207c:	e002      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002082:	2300      	movs	r3, #0
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	f002 0203 	and.w	r2, r2, #3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4093      	lsls	r3, r2
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002094:	4935      	ldr	r1, [pc, #212]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x304>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3301      	adds	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	f67f aea2 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e12b      	b.n	8002426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fafc 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002220:	f002 fa12 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a81      	ldr	r2, [pc, #516]	; (8002430 <HAL_I2C_Init+0x274>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d807      	bhi.n	8002240 <HAL_I2C_Init+0x84>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_I2C_Init+0x278>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e006      	b.n	800224e <HAL_I2C_Init+0x92>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a7d      	ldr	r2, [pc, #500]	; (8002438 <HAL_I2C_Init+0x27c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0e7      	b.n	8002426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a78      	ldr	r2, [pc, #480]	; (800243c <HAL_I2C_Init+0x280>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a6a      	ldr	r2, [pc, #424]	; (8002430 <HAL_I2C_Init+0x274>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <HAL_I2C_Init+0xd4>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	e009      	b.n	80022a4 <HAL_I2C_Init+0xe8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a69      	ldr	r2, [pc, #420]	; (8002440 <HAL_I2C_Init+0x284>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	3301      	adds	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	495c      	ldr	r1, [pc, #368]	; (8002430 <HAL_I2C_Init+0x274>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d819      	bhi.n	80022f8 <HAL_I2C_Init+0x13c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e59      	subs	r1, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d8:	400b      	ands	r3, r1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_I2C_Init+0x138>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e59      	subs	r1, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	e051      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e04f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_I2C_Init+0x168>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e012      	b.n	800234a <HAL_I2C_Init+0x18e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x196>
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10e      	bne.n	8002378 <HAL_I2C_Init+0x1bc>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e58      	subs	r0, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	440b      	add	r3, r1
 8002368:	fbb0 f3f3 	udiv	r3, r0, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	0099      	lsls	r1, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6809      	ldr	r1, [r1, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6911      	ldr	r1, [r2, #16]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68d2      	ldr	r2, [r2, #12]
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	000186a0 	.word	0x000186a0
 8002434:	001e847f 	.word	0x001e847f
 8002438:	003d08ff 	.word	0x003d08ff
 800243c:	431bde83 	.word	0x431bde83
 8002440:	10624dd3 	.word	0x10624dd3

08002444 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002464:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	2b10      	cmp	r3, #16
 8002472:	d003      	beq.n	800247c <HAL_I2C_EV_IRQHandler+0x38>
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	f040 80bd 	bne.w	80025f6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800249c:	d003      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0x62>
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_EV_IRQHandler+0x66>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_I2C_EV_IRQHandler+0x68>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f000 812e 	beq.w	800270e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0x92>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	0a5b      	lsrs	r3, r3, #9
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f001 fc55 	bl	8003d78 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fd62 	bl	8002f98 <I2C_Master_SB>
 80024d4:	e08e      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	0a5b      	lsrs	r3, r3, #9
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fdd8 	bl	80030a4 <I2C_Master_ADD10>
 80024f4:	e07e      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_I2C_EV_IRQHandler+0xd2>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	0a5b      	lsrs	r3, r3, #9
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fdf2 	bl	80030f8 <I2C_Master_ADDR>
 8002514:	e06e      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d037      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002530:	f000 80ef 	beq.w	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	09db      	lsrs	r3, r3, #7
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <HAL_I2C_EV_IRQHandler+0x11c>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	0a9b      	lsrs	r3, r3, #10
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_I2C_EV_IRQHandler+0x11c>
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d103      	bne.n	8002560 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f9ef 	bl	800293c <I2C_MasterTransmit_TXE>
 800255e:	e049      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80d2 	beq.w	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	0a5b      	lsrs	r3, r3, #9
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80cb 	beq.w	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d103      	bne.n	800258a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fa76 	bl	8002a74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002588:	e0c3      	b.n	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fada 	bl	8002b44 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002590:	e0bf      	b.n	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a0:	f000 80b7 	beq.w	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00f      	beq.n	80025d0 <HAL_I2C_EV_IRQHandler+0x18c>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <HAL_I2C_EV_IRQHandler+0x18c>
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d103      	bne.n	80025d0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fb4a 	bl	8002c62 <I2C_MasterReceive_RXNE>
 80025ce:	e011      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 809a 	beq.w	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	0a5b      	lsrs	r3, r3, #9
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8093 	beq.w	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fbe9 	bl	8002dc4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f2:	e08e      	b.n	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
 80025f4:	e08d      	b.n	8002712 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e007      	b.n	8002618 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d012      	beq.n	800264a <HAL_I2C_EV_IRQHandler+0x206>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	0a5b      	lsrs	r3, r3, #9
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00c      	beq.n	800264a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002640:	69b9      	ldr	r1, [r7, #24]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 ffa7 	bl	8003596 <I2C_Slave_ADDR>
 8002648:	e066      	b.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_I2C_EV_IRQHandler+0x226>
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	0a5b      	lsrs	r3, r3, #9
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 ffdc 	bl	8003620 <I2C_Slave_STOPF>
 8002668:	e056      	b.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800266a:	7bbb      	ldrb	r3, [r7, #14]
 800266c:	2b21      	cmp	r3, #33	; 0x21
 800266e:	d002      	beq.n	8002676 <HAL_I2C_EV_IRQHandler+0x232>
 8002670:	7bbb      	ldrb	r3, [r7, #14]
 8002672:	2b29      	cmp	r3, #41	; 0x29
 8002674:	d125      	bne.n	80026c2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	09db      	lsrs	r3, r3, #7
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00f      	beq.n	80026a2 <HAL_I2C_EV_IRQHandler+0x25e>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	0a9b      	lsrs	r3, r3, #10
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_I2C_EV_IRQHandler+0x25e>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 febd 	bl	800341a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026a0:	e039      	b.n	8002716 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d033      	beq.n	8002716 <HAL_I2C_EV_IRQHandler+0x2d2>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	0a5b      	lsrs	r3, r3, #9
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02d      	beq.n	8002716 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 feea 	bl	8003494 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026c0:	e029      	b.n	8002716 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00f      	beq.n	80026ee <HAL_I2C_EV_IRQHandler+0x2aa>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	0a9b      	lsrs	r3, r3, #10
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_I2C_EV_IRQHandler+0x2aa>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fef5 	bl	80034d6 <I2C_SlaveReceive_RXNE>
 80026ec:	e014      	b.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00e      	beq.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	0a5b      	lsrs	r3, r3, #9
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 ff23 	bl	8003552 <I2C_SlaveReceive_BTF>
 800270c:	e004      	b.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002716:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b08a      	sub	sp, #40	; 0x28
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002740:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00e      	beq.n	800276c <HAL_I2C_ER_IRQHandler+0x4e>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800276a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	0a5b      	lsrs	r3, r3, #9
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <HAL_I2C_ER_IRQHandler+0x78>
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002794:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	0a9b      	lsrs	r3, r3, #10
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03f      	beq.n	8002822 <HAL_I2C_ER_IRQHandler+0x104>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d039      	beq.n	8002822 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80027ae:	7efb      	ldrb	r3, [r7, #27]
 80027b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80027c8:	7ebb      	ldrb	r3, [r7, #26]
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d112      	bne.n	80027f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	2b21      	cmp	r3, #33	; 0x21
 80027d8:	d008      	beq.n	80027ec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	2b29      	cmp	r3, #41	; 0x29
 80027de:	d005      	beq.n	80027ec <HAL_I2C_ER_IRQHandler+0xce>
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b28      	cmp	r3, #40	; 0x28
 80027e4:	d106      	bne.n	80027f4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b21      	cmp	r3, #33	; 0x21
 80027ea:	d103      	bne.n	80027f4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f001 f847 	bl	8003880 <I2C_Slave_AF>
 80027f2:	e016      	b.n	8002822 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002806:	7efb      	ldrb	r3, [r7, #27]
 8002808:	2b10      	cmp	r3, #16
 800280a:	d002      	beq.n	8002812 <HAL_I2C_ER_IRQHandler+0xf4>
 800280c:	7efb      	ldrb	r3, [r7, #27]
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d107      	bne.n	8002822 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	0adb      	lsrs	r3, r3, #11
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <HAL_I2C_ER_IRQHandler+0x12e>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800284a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f001 f87e 	bl	8003960 <I2C_ITError>
  }
}
 8002864:	bf00      	nop
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
 80028c8:	4613      	mov	r3, r2
 80028ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002952:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d150      	bne.n	8002a04 <I2C_MasterTransmit_TXE+0xc8>
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b21      	cmp	r3, #33	; 0x21
 8002966:	d14d      	bne.n	8002a04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b08      	cmp	r3, #8
 800296c:	d01d      	beq.n	80029aa <I2C_MasterTransmit_TXE+0x6e>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b20      	cmp	r3, #32
 8002972:	d01a      	beq.n	80029aa <I2C_MasterTransmit_TXE+0x6e>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800297a:	d016      	beq.n	80029aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800298a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2211      	movs	r2, #17
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff62 	bl	800286c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029a8:	e060      	b.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d107      	bne.n	80029f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff7d 	bl	80028ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029f2:	e03b      	b.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff35 	bl	800286c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a02:	e033      	b.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b21      	cmp	r3, #33	; 0x21
 8002a08:	d005      	beq.n	8002a16 <I2C_MasterTransmit_TXE+0xda>
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d12d      	bne.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b22      	cmp	r3, #34	; 0x22
 8002a14:	d12a      	bne.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d108      	bne.n	8002a32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a30:	e01c      	b.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d103      	bne.n	8002a46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f880 	bl	8002b44 <I2C_MemoryTransmit_TXE_BTF>
}
 8002a44:	e012      	b.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a6a:	e7ff      	b.n	8002a6c <I2C_MasterTransmit_TXE+0x130>
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b21      	cmp	r3, #33	; 0x21
 8002a8c:	d156      	bne.n	8002b3c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002abc:	e03e      	b.n	8002b3c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d01d      	beq.n	8002b00 <I2C_MasterTransmit_BTF+0x8c>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d01a      	beq.n	8002b00 <I2C_MasterTransmit_BTF+0x8c>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad0:	d016      	beq.n	8002b00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ae0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2211      	movs	r2, #17
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff feb7 	bl	800286c <HAL_I2C_MasterTxCpltCallback>
}
 8002afe:	e01d      	b.n	8002b3c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fe98 	bl	800286c <HAL_I2C_MasterTxCpltCallback>
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d11d      	bne.n	8002b98 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10b      	bne.n	8002b7c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b7a:	e06e      	b.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	121b      	asrs	r3, r3, #8
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b96:	e060      	b.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10b      	bne.n	8002bb8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bb6:	e050      	b.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d14c      	bne.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b22      	cmp	r3, #34	; 0x22
 8002bc4:	d108      	bne.n	8002bd8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	e040      	b.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b21      	cmp	r3, #33	; 0x21
 8002be6:	d112      	bne.n	8002c0e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c0c:	e025      	b.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d120      	bne.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b21      	cmp	r3, #33	; 0x21
 8002c1c:	d11d      	bne.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c2c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fe49 	bl	80028ec <HAL_I2C_MemTxCpltCallback>
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b22      	cmp	r3, #34	; 0x22
 8002c74:	f040 80a2 	bne.w	8002dbc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d921      	bls.n	8002cca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	f040 8082 	bne.w	8002dbc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002cc8:	e078      	b.n	8002dbc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d074      	beq.n	8002dbc <I2C_MasterReceive_RXNE+0x15a>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d002      	beq.n	8002cde <I2C_MasterReceive_RXNE+0x7c>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d16e      	bne.n	8002dbc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f001 f818 	bl	8003d14 <I2C_WaitOnSTOPRequestThroughIT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d142      	bne.n	8002d70 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d10a      	bne.n	8002d5a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fdd4 	bl	8002900 <HAL_I2C_MemRxCpltCallback>
}
 8002d58:	e030      	b.n	8002dbc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2212      	movs	r2, #18
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fd89 	bl	8002880 <HAL_I2C_MasterRxCpltCallback>
}
 8002d6e:	e025      	b.n	8002dbc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fdac 	bl	8002914 <HAL_I2C_ErrorCallback>
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d11b      	bne.n	8002e14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e12:	e0bd      	b.n	8002f90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d129      	bne.n	8002e72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d00a      	beq.n	8002e4a <I2C_MasterReceive_BTF+0x86>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d007      	beq.n	8002e4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e70:	e08e      	b.n	8002f90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d176      	bne.n	8002f6a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d002      	beq.n	8002e88 <I2C_MasterReceive_BTF+0xc4>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d108      	bne.n	8002e9a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e019      	b.n	8002ece <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d002      	beq.n	8002ea6 <I2C_MasterReceive_BTF+0xe2>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d108      	bne.n	8002eb8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e00a      	b.n	8002ece <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d007      	beq.n	8002ece <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d10a      	bne.n	8002f54 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fcd7 	bl	8002900 <HAL_I2C_MemRxCpltCallback>
}
 8002f52:	e01d      	b.n	8002f90 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2212      	movs	r2, #18
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fc8c 	bl	8002880 <HAL_I2C_MasterRxCpltCallback>
}
 8002f68:	e012      	b.n	8002f90 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d117      	bne.n	8002fdc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002fc6:	e067      	b.n	8003098 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	611a      	str	r2, [r3, #16]
}
 8002fda:	e05d      	b.n	8003098 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe4:	d133      	bne.n	800304e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b21      	cmp	r3, #33	; 0x21
 8002ff0:	d109      	bne.n	8003006 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003002:	611a      	str	r2, [r3, #16]
 8003004:	e008      	b.n	8003018 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <I2C_Master_SB+0x92>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	2b00      	cmp	r3, #0
 8003030:	d032      	beq.n	8003098 <I2C_Master_SB+0x100>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02d      	beq.n	8003098 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
}
 800304c:	e024      	b.n	8003098 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10e      	bne.n	8003074 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	b29b      	uxth	r3, r3
 800305c:	11db      	asrs	r3, r3, #7
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f003 0306 	and.w	r3, r3, #6
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f063 030f 	orn	r3, r3, #15
 800306a:	b2da      	uxtb	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]
}
 8003072:	e011      	b.n	8003098 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10d      	bne.n	8003098 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	b29b      	uxth	r3, r3
 8003082:	11db      	asrs	r3, r3, #7
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0306 	and.w	r3, r3, #6
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f063 030e 	orn	r3, r3, #14
 8003090:	b2da      	uxtb	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	611a      	str	r2, [r3, #16]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <I2C_Master_ADD10+0x26>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d108      	bne.n	80030dc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <I2C_Master_ADD10+0x48>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ea:	605a      	str	r2, [r3, #4]
  }
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b091      	sub	sp, #68	; 0x44
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003106:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b22      	cmp	r3, #34	; 0x22
 8003120:	f040 8169 	bne.w	80033f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10f      	bne.n	800314c <I2C_Master_ADDR+0x54>
 800312c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d10b      	bne.n	800314c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003134:	2300      	movs	r3, #0
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	e160      	b.n	800340e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11d      	bne.n	8003190 <I2C_Master_ADDR+0x98>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800315c:	d118      	bne.n	8003190 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003182:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	651a      	str	r2, [r3, #80]	; 0x50
 800318e:	e13e      	b.n	800340e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e115      	b.n	80033ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	f040 808a 	bne.w	80032e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d4:	d137      	bne.n	8003246 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	d113      	bne.n	800321e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003204:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	e0e7      	b.n	80033ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	623b      	str	r3, [r7, #32]
 8003232:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e0d3      	b.n	80033ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b08      	cmp	r3, #8
 800324a:	d02e      	beq.n	80032aa <I2C_Master_ADDR+0x1b2>
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	2b20      	cmp	r3, #32
 8003250:	d02b      	beq.n	80032aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	2b12      	cmp	r3, #18
 8003256:	d102      	bne.n	800325e <I2C_Master_ADDR+0x166>
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	2b01      	cmp	r3, #1
 800325c:	d125      	bne.n	80032aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	2b04      	cmp	r3, #4
 8003262:	d00e      	beq.n	8003282 <I2C_Master_ADDR+0x18a>
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	2b02      	cmp	r3, #2
 8003268:	d00b      	beq.n	8003282 <I2C_Master_ADDR+0x18a>
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	2b10      	cmp	r3, #16
 800326e:	d008      	beq.n	8003282 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e007      	b.n	8003292 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003290:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	e0a1      	b.n	80033ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e085      	b.n	80033ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d14d      	bne.n	8003388 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d016      	beq.n	8003320 <I2C_Master_ADDR+0x228>
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d013      	beq.n	8003320 <I2C_Master_ADDR+0x228>
 80032f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d010      	beq.n	8003320 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e007      	b.n	8003330 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800332e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333e:	d117      	bne.n	8003370 <I2C_Master_ADDR+0x278>
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003346:	d00b      	beq.n	8003360 <I2C_Master_ADDR+0x268>
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	2b01      	cmp	r3, #1
 800334c:	d008      	beq.n	8003360 <I2C_Master_ADDR+0x268>
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	2b08      	cmp	r3, #8
 8003352:	d005      	beq.n	8003360 <I2C_Master_ADDR+0x268>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b10      	cmp	r3, #16
 8003358:	d002      	beq.n	8003360 <I2C_Master_ADDR+0x268>
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	2b20      	cmp	r3, #32
 800335e:	d107      	bne.n	8003370 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800336e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	e032      	b.n	80033ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003396:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a6:	d117      	bne.n	80033d8 <I2C_Master_ADDR+0x2e0>
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ae:	d00b      	beq.n	80033c8 <I2C_Master_ADDR+0x2d0>
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d008      	beq.n	80033c8 <I2C_Master_ADDR+0x2d0>
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d005      	beq.n	80033c8 <I2C_Master_ADDR+0x2d0>
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d002      	beq.n	80033c8 <I2C_Master_ADDR+0x2d0>
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d107      	bne.n	80033d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033f4:	e00b      	b.n	800340e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	e7ff      	b.n	800340e <I2C_Master_ADDR+0x316>
 800340e:	bf00      	nop
 8003410:	3744      	adds	r7, #68	; 0x44
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02b      	beq.n	800348c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d114      	bne.n	800348c <I2C_SlaveTransmit_TXE+0x72>
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b29      	cmp	r3, #41	; 0x29
 8003466:	d111      	bne.n	800348c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2221      	movs	r2, #33	; 0x21
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2228      	movs	r2, #40	; 0x28
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff fa04 	bl	8002894 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d011      	beq.n	80034ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d02c      	beq.n	800354a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d114      	bne.n	800354a <I2C_SlaveReceive_RXNE+0x74>
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b2a      	cmp	r3, #42	; 0x2a
 8003524:	d111      	bne.n	800354a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003534:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2222      	movs	r2, #34	; 0x22
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2228      	movs	r2, #40	; 0x28
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff f9af 	bl	80028a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035b0:	2b28      	cmp	r3, #40	; 0x28
 80035b2:	d127      	bne.n	8003604 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	09db      	lsrs	r3, r3, #7
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	81bb      	strh	r3, [r7, #12]
 80035e6:	e002      	b.n	80035ee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035f6:	89ba      	ldrh	r2, [r7, #12]
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff f95d 	bl	80028bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003602:	e008      	b.n	8003616 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0202 	mvn.w	r2, #2
 800360c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800363e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367c:	d172      	bne.n	8003764 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b22      	cmp	r3, #34	; 0x22
 8003682:	d002      	beq.n	800368a <I2C_Slave_STOPF+0x6a>
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b2a      	cmp	r3, #42	; 0x2a
 8003688:	d135      	bne.n	80036f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fbcd 	bl	8001e62 <HAL_DMA_GetState>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d049      	beq.n	8003762 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	4a69      	ldr	r2, [pc, #420]	; (8003878 <I2C_Slave_STOPF+0x258>)
 80036d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fb9f 	bl	8001e1e <HAL_DMA_Abort_IT>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d03d      	beq.n	8003762 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f0:	4610      	mov	r0, r2
 80036f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036f4:	e035      	b.n	8003762 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f043 0204 	orr.w	r2, r3, #4
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003728:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fb97 	bl	8001e62 <HAL_DMA_GetState>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d014      	beq.n	8003764 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	4a4e      	ldr	r2, [pc, #312]	; (8003878 <I2C_Slave_STOPF+0x258>)
 8003740:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fb69 	bl	8001e1e <HAL_DMA_Abort_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800375c:	4610      	mov	r0, r2
 800375e:	4798      	blx	r3
 8003760:	e000      	b.n	8003764 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003762:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03e      	beq.n	80037ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d112      	bne.n	80037a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d112      	bne.n	80037d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8b3 	bl	8003960 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037fa:	e039      	b.n	8003870 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003800:	d109      	bne.n	8003816 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2228      	movs	r2, #40	; 0x28
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff f849 	bl	80028a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b28      	cmp	r3, #40	; 0x28
 8003820:	d111      	bne.n	8003846 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <I2C_Slave_STOPF+0x25c>)
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff f84a 	bl	80028d8 <HAL_I2C_ListenCpltCallback>
}
 8003844:	e014      	b.n	8003870 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	2b22      	cmp	r3, #34	; 0x22
 800384c:	d002      	beq.n	8003854 <I2C_Slave_STOPF+0x234>
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b22      	cmp	r3, #34	; 0x22
 8003852:	d10d      	bne.n	8003870 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff f81c 	bl	80028a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	08003bc5 	.word	0x08003bc5
 800387c:	ffff0000 	.word	0xffff0000

08003880 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d002      	beq.n	80038a2 <I2C_Slave_AF+0x22>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d129      	bne.n	80038f6 <I2C_Slave_AF+0x76>
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b28      	cmp	r3, #40	; 0x28
 80038a6:	d126      	bne.n	80038f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a2c      	ldr	r2, [pc, #176]	; (800395c <I2C_Slave_AF+0xdc>)
 80038ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe fff2 	bl	80028d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80038f4:	e02e      	b.n	8003954 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b21      	cmp	r3, #33	; 0x21
 80038fa:	d126      	bne.n	800394a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <I2C_Slave_AF+0xdc>)
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2221      	movs	r2, #33	; 0x21
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003926:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003930:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003940:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe ffa6 	bl	8002894 <HAL_I2C_SlaveTxCpltCallback>
}
 8003948:	e004      	b.n	8003954 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003952:	615a      	str	r2, [r3, #20]
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	ffff0000 	.word	0xffff0000

08003960 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003976:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d002      	beq.n	8003984 <I2C_ITError+0x24>
 800397e:	7bbb      	ldrb	r3, [r7, #14]
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d10a      	bne.n	800399a <I2C_ITError+0x3a>
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b22      	cmp	r3, #34	; 0x22
 8003988:	d107      	bne.n	800399a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003998:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039a0:	2b28      	cmp	r3, #40	; 0x28
 80039a2:	d107      	bne.n	80039b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2228      	movs	r2, #40	; 0x28
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039b2:	e015      	b.n	80039e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c2:	d00a      	beq.n	80039da <I2C_ITError+0x7a>
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b60      	cmp	r3, #96	; 0x60
 80039c8:	d007      	beq.n	80039da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d162      	bne.n	8003ab6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d020      	beq.n	8003a50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	4a6a      	ldr	r2, [pc, #424]	; (8003bbc <I2C_ITError+0x25c>)
 8003a14:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f9ff 	bl	8001e1e <HAL_DMA_Abort_IT>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8089 	beq.w	8003b3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4798      	blx	r3
 8003a4e:	e074      	b.n	8003b3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	4a59      	ldr	r2, [pc, #356]	; (8003bbc <I2C_ITError+0x25c>)
 8003a56:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe f9de 	bl	8001e1e <HAL_DMA_Abort_IT>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d068      	beq.n	8003b3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d10b      	bne.n	8003a8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4798      	blx	r3
 8003ab4:	e041      	b.n	8003b3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b60      	cmp	r3, #96	; 0x60
 8003ac0:	d125      	bne.n	8003b0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d10b      	bne.n	8003af6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fe ff0e 	bl	8002928 <HAL_I2C_AbortCpltCallback>
 8003b0c:	e015      	b.n	8003b3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d10b      	bne.n	8003b34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fe feed 	bl	8002914 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10e      	bne.n	8003b68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d113      	bne.n	8003bb4 <I2C_ITError+0x254>
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b28      	cmp	r3, #40	; 0x28
 8003b90:	d110      	bne.n	8003bb4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <I2C_ITError+0x260>)
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fe fe92 	bl	80028d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	08003bc5 	.word	0x08003bc5
 8003bc0:	ffff0000 	.word	0xffff0000

08003bc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bde:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <I2C_DMAAbort+0x148>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	08db      	lsrs	r3, r3, #3
 8003be4:	4a4a      	ldr	r2, [pc, #296]	; (8003d10 <I2C_DMAAbort+0x14c>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0a1a      	lsrs	r2, r3, #8
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c0a:	e00a      	b.n	8003c22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c20:	d0ea      	beq.n	8003bf8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	2200      	movs	r2, #0
 8003c30:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	2200      	movs	r2, #0
 8003c40:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	2200      	movs	r2, #0
 8003c66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	2200      	movs	r2, #0
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d10e      	bne.n	8003cb2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7fe fe3c 	bl	8002928 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cb0:	e027      	b.n	8003d02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cb8:	2b28      	cmp	r3, #40	; 0x28
 8003cba:	d117      	bne.n	8003cec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2228      	movs	r2, #40	; 0x28
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cea:	e007      	b.n	8003cfc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f7fe fe09 	bl	8002914 <HAL_I2C_ErrorCallback>
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000020 	.word	0x20000020
 8003d10:	14f8b589 	.word	0x14f8b589

08003d14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	0a1a      	lsrs	r2, r3, #8
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e008      	b.n	8003d64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d60:	d0e9      	beq.n	8003d36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000020 	.word	0x20000020
 8003d74:	14f8b589 	.word	0x14f8b589

08003d78 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d88:	d103      	bne.n	8003d92 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d90:	e007      	b.n	8003da2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d9a:	d102      	bne.n	8003da2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2208      	movs	r2, #8
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e264      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d075      	beq.n	8003eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	4ba3      	ldr	r3, [pc, #652]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4ba0      	ldr	r3, [pc, #640]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de6:	4b9d      	ldr	r3, [pc, #628]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	4b99      	ldr	r3, [pc, #612]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x108>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d157      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e23f      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x74>
 8003e16:	4b91      	ldr	r3, [pc, #580]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a90      	ldr	r2, [pc, #576]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x98>
 8003e2e:	4b8b      	ldr	r3, [pc, #556]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a8a      	ldr	r2, [pc, #552]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a87      	ldr	r2, [pc, #540]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e48:	4b84      	ldr	r3, [pc, #528]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a83      	ldr	r2, [pc, #524]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a80      	ldr	r2, [pc, #512]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd fe4c 	bl	8001b04 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fd fe48 	bl	8001b04 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e204      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b76      	ldr	r3, [pc, #472]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xc0>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd fe38 	bl	8001b04 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd fe34 	bl	8001b04 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1f0      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0xe8>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	4b65      	ldr	r3, [pc, #404]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b62      	ldr	r3, [pc, #392]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b5f      	ldr	r3, [pc, #380]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b5c      	ldr	r3, [pc, #368]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1c4      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4952      	ldr	r1, [pc, #328]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCC_OscConfig+0x2b0>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd fded 	bl	8001b04 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fd fde9 	bl	8001b04 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1a5      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4940      	ldr	r1, [pc, #256]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <HAL_RCC_OscConfig+0x2b0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd fdcc 	bl	8001b04 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd fdc8 	bl	8001b04 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e184      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d030      	beq.n	8003ffc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b30      	ldr	r3, [pc, #192]	; (8004064 <HAL_RCC_OscConfig+0x2b4>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd fdac 	bl	8001b04 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd fda8 	bl	8001b04 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e164      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b26      	ldr	r3, [pc, #152]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x200>
 8003fce:	e015      	b.n	8003ffc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x2b4>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fd95 	bl	8001b04 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fde:	f7fd fd91 	bl	8001b04 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e14d      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a0 	beq.w	800414a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004052:	f7fd fd57 	bl	8001b04 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004058:	e011      	b.n	800407e <HAL_RCC_OscConfig+0x2ce>
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	42470000 	.word	0x42470000
 8004064:	42470e80 	.word	0x42470e80
 8004068:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd fd4a 	bl	8001b04 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e106      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b85      	ldr	r3, [pc, #532]	; (8004294 <HAL_RCC_OscConfig+0x4e4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2f0>
 8004092:	4b81      	ldr	r3, [pc, #516]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	4a80      	ldr	r2, [pc, #512]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6713      	str	r3, [r2, #112]	; 0x70
 800409e:	e01c      	b.n	80040da <HAL_RCC_OscConfig+0x32a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCC_OscConfig+0x312>
 80040a8:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a7a      	ldr	r2, [pc, #488]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b78      	ldr	r3, [pc, #480]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a77      	ldr	r2, [pc, #476]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
 80040c0:	e00b      	b.n	80040da <HAL_RCC_OscConfig+0x32a>
 80040c2:	4b75      	ldr	r3, [pc, #468]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a74      	ldr	r2, [pc, #464]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	4b72      	ldr	r3, [pc, #456]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a71      	ldr	r2, [pc, #452]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fd fd0f 	bl	8001b04 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd fd0b 	bl	8001b04 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0c5      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b65      	ldr	r3, [pc, #404]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCC_OscConfig+0x33a>
 800410c:	e014      	b.n	8004138 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fd fcf9 	bl	8001b04 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd fcf5 	bl	8001b04 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0af      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b56      	ldr	r3, [pc, #344]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a55      	ldr	r2, [pc, #340]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 809b 	beq.w	800428a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004154:	4b50      	ldr	r3, [pc, #320]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d05c      	beq.n	800421a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d141      	bne.n	80041ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <HAL_RCC_OscConfig+0x4ec>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fd fcc9 	bl	8001b04 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004176:	f7fd fcc5 	bl	8001b04 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e081      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	4b43      	ldr	r3, [pc, #268]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	019b      	lsls	r3, r3, #6
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	3b01      	subs	r3, #1
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	4937      	ldr	r1, [pc, #220]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041be:	4b37      	ldr	r3, [pc, #220]	; (800429c <HAL_RCC_OscConfig+0x4ec>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fd fc9e 	bl	8001b04 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd fc9a 	bl	8001b04 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e056      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x41c>
 80041ea:	e04e      	b.n	800428a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ec:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCC_OscConfig+0x4ec>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fd fc87 	bl	8001b04 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fd fc83 	bl	8001b04 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e03f      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420c:	4b22      	ldr	r3, [pc, #136]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x44a>
 8004218:	e037      	b.n	800428a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e032      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d028      	beq.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d121      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d11a      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800425c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800425e:	4293      	cmp	r3, r2
 8004260:	d111      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	3b01      	subs	r3, #1
 8004270:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d107      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40007000 	.word	0x40007000
 8004298:	40023800 	.word	0x40023800
 800429c:	42470060 	.word	0x42470060

080042a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0cc      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d90c      	bls.n	80042dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b65      	ldr	r3, [pc, #404]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b63      	ldr	r3, [pc, #396]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0b8      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f4:	4b59      	ldr	r3, [pc, #356]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b50      	ldr	r3, [pc, #320]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	494d      	ldr	r1, [pc, #308]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d044      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d003      	beq.n	800435e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435a:	2b03      	cmp	r3, #3
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435e:	4b3f      	ldr	r3, [pc, #252]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e067      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 0203 	bic.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4934      	ldr	r1, [pc, #208]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004390:	f7fd fbb8 	bl	8001b04 <HAL_GetTick>
 8004394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	e00a      	b.n	80043ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004398:	f7fd fbb4 	bl	8001b04 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 020c 	and.w	r2, r3, #12
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1eb      	bne.n	8004398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d20c      	bcs.n	80043e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b22      	ldr	r3, [pc, #136]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e032      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4916      	ldr	r1, [pc, #88]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	490e      	ldr	r1, [pc, #56]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004426:	f000 f821 	bl	800446c <HAL_RCC_GetSysClockFreq>
 800442a:	4602      	mov	r2, r0
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	490a      	ldr	r1, [pc, #40]	; (8004460 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	5ccb      	ldrb	r3, [r1, r3]
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd fb18 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023c00 	.word	0x40023c00
 800445c:	40023800 	.word	0x40023800
 8004460:	080052bc 	.word	0x080052bc
 8004464:	20000020 	.word	0x20000020
 8004468:	20000024 	.word	0x20000024

0800446c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800446c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	2300      	movs	r3, #0
 800447e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004484:	4b67      	ldr	r3, [pc, #412]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d00d      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x40>
 8004490:	2b08      	cmp	r3, #8
 8004492:	f200 80bd 	bhi.w	8004610 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x34>
 800449a:	2b04      	cmp	r3, #4
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800449e:	e0b7      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b61      	ldr	r3, [pc, #388]	; (8004628 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044a2:	60bb      	str	r3, [r7, #8]
       break;
 80044a4:	e0b7      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a6:	4b61      	ldr	r3, [pc, #388]	; (800462c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044a8:	60bb      	str	r3, [r7, #8]
      break;
 80044aa:	e0b4      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b6:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04d      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c2:	4b58      	ldr	r3, [pc, #352]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	461a      	mov	r2, r3
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	ea02 0800 	and.w	r8, r2, r0
 80044da:	ea03 0901 	and.w	r9, r3, r1
 80044de:	4640      	mov	r0, r8
 80044e0:	4649      	mov	r1, r9
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	014b      	lsls	r3, r1, #5
 80044ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044f0:	0142      	lsls	r2, r0, #5
 80044f2:	4610      	mov	r0, r2
 80044f4:	4619      	mov	r1, r3
 80044f6:	ebb0 0008 	subs.w	r0, r0, r8
 80044fa:	eb61 0109 	sbc.w	r1, r1, r9
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	018b      	lsls	r3, r1, #6
 8004508:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800450c:	0182      	lsls	r2, r0, #6
 800450e:	1a12      	subs	r2, r2, r0
 8004510:	eb63 0301 	sbc.w	r3, r3, r1
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	00d9      	lsls	r1, r3, #3
 800451e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004522:	00d0      	lsls	r0, r2, #3
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	eb12 0208 	adds.w	r2, r2, r8
 800452c:	eb43 0309 	adc.w	r3, r3, r9
 8004530:	f04f 0000 	mov.w	r0, #0
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	0259      	lsls	r1, r3, #9
 800453a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800453e:	0250      	lsls	r0, r2, #9
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	f7fc fa60 	bl	8000a14 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e04a      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	461a      	mov	r2, r3
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	ea02 0400 	and.w	r4, r2, r0
 8004576:	ea03 0501 	and.w	r5, r3, r1
 800457a:	4620      	mov	r0, r4
 800457c:	4629      	mov	r1, r5
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	014b      	lsls	r3, r1, #5
 8004588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800458c:	0142      	lsls	r2, r0, #5
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	1b00      	subs	r0, r0, r4
 8004594:	eb61 0105 	sbc.w	r1, r1, r5
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	018b      	lsls	r3, r1, #6
 80045a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045a6:	0182      	lsls	r2, r0, #6
 80045a8:	1a12      	subs	r2, r2, r0
 80045aa:	eb63 0301 	sbc.w	r3, r3, r1
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	00d9      	lsls	r1, r3, #3
 80045b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045bc:	00d0      	lsls	r0, r2, #3
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	1912      	adds	r2, r2, r4
 80045c4:	eb45 0303 	adc.w	r3, r5, r3
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	0299      	lsls	r1, r3, #10
 80045d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045d6:	0290      	lsls	r0, r2, #10
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f7fc fa14 	bl	8000a14 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4613      	mov	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	3301      	adds	r3, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	60bb      	str	r3, [r7, #8]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004612:	60bb      	str	r3, [r7, #8]
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	68bb      	ldr	r3, [r7, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	00f42400 	.word	0x00f42400
 800462c:	007a1200 	.word	0x007a1200

08004630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCC_GetHCLKFreq+0x14>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000020 	.word	0x20000020

08004648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800464c:	f7ff fff0 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0a9b      	lsrs	r3, r3, #10
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4903      	ldr	r1, [pc, #12]	; (800466c <HAL_RCC_GetPCLK1Freq+0x24>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	080052cc 	.word	0x080052cc

08004670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004674:	f7ff ffdc 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8004678:	4602      	mov	r2, r0
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	0b5b      	lsrs	r3, r3, #13
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	4903      	ldr	r1, [pc, #12]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004686:	5ccb      	ldrb	r3, [r1, r3]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800468c:	4618      	mov	r0, r3
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40023800 	.word	0x40023800
 8004694:	080052cc 	.word	0x080052cc

08004698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e03f      	b.n	800472a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd f8e6 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2224      	movs	r2, #36	; 0x24
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fbed 	bl	8004ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	4613      	mov	r3, r2
 800473e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b20      	cmp	r3, #32
 800474a:	d130      	bne.n	80047ae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UART_Transmit_IT+0x26>
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e029      	b.n	80047b0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_UART_Transmit_IT+0x38>
 8004766:	2302      	movs	r3, #2
 8004768:	e022      	b.n	80047b0 <HAL_UART_Transmit_IT+0x7e>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2221      	movs	r2, #33	; 0x21
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d11d      	bne.n	8004812 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_UART_Receive_IT+0x26>
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e016      	b.n	8004814 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_UART_Receive_IT+0x38>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e00f      	b.n	8004814 <HAL_UART_Receive_IT+0x58>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	461a      	mov	r2, r3
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f9dd 	bl	8004bc8 <UART_Start_Receive_IT>
 800480e:	4603      	mov	r3, r0
 8004810:	e000      	b.n	8004814 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10d      	bne.n	800486e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_UART_IRQHandler+0x52>
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa91 	bl	8004d8e <UART_Receive_IT>
      return;
 800486c:	e17c      	b.n	8004b68 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80b1 	beq.w	80049d8 <HAL_UART_IRQHandler+0x1bc>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <HAL_UART_IRQHandler+0x70>
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80a6 	beq.w	80049d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_UART_IRQHandler+0x90>
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_UART_IRQHandler+0xb0>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f043 0202 	orr.w	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_UART_IRQHandler+0xd0>
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00f      	beq.n	8004916 <HAL_UART_IRQHandler+0xfa>
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <HAL_UART_IRQHandler+0xee>
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0208 	orr.w	r2, r3, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 811f 	beq.w	8004b5e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_UART_IRQHandler+0x11e>
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fa2a 	bl	8004d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_UART_IRQHandler+0x146>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d031      	beq.n	80049c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f96a 	bl	8004c3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d123      	bne.n	80049be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004984:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	4a77      	ldr	r2, [pc, #476]	; (8004b70 <HAL_UART_IRQHandler+0x354>)
 8004994:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd fa3f 	bl	8001e1e <HAL_DMA_Abort_IT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049b0:	4610      	mov	r0, r2
 80049b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e00e      	b.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8f0 	bl	8004b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	e00a      	b.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8ec 	bl	8004b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e006      	b.n	80049d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8e8 	bl	8004b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049d2:	e0c4      	b.n	8004b5e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	bf00      	nop
    return;
 80049d6:	e0c2      	b.n	8004b5e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 80a2 	bne.w	8004b26 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 809c 	beq.w	8004b26 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8096 	beq.w	8004b26 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d14f      	bne.n	8004abe <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a28:	8a3b      	ldrh	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8099 	beq.w	8004b62 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a34:	8a3a      	ldrh	r2, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f080 8093 	bcs.w	8004b62 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8a3a      	ldrh	r2, [r7, #16]
 8004a40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4c:	d02b      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a5c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695a      	ldr	r2, [r3, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0210 	bic.w	r2, r2, #16
 8004a9a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fd f94c 	bl	8001d3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f87a 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004abc:	e051      	b.n	8004b62 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d047      	beq.n	8004b66 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004ad6:	8a7b      	ldrh	r3, [r7, #18]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d044      	beq.n	8004b66 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004aea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0210 	bic.w	r2, r2, #16
 8004b18:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b1a:	8a7b      	ldrh	r3, [r7, #18]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f846 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b24:	e01f      	b.n	8004b66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_UART_IRQHandler+0x326>
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8bf 	bl	8004cbe <UART_Transmit_IT>
    return;
 8004b40:	e012      	b.n	8004b68 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_UART_IRQHandler+0x34c>
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f901 	bl	8004d5e <UART_EndTransmit_IT>
    return;
 8004b5c:	e004      	b.n	8004b68 <HAL_UART_IRQHandler+0x34c>
    return;
 8004b5e:	bf00      	nop
 8004b60:	e002      	b.n	8004b68 <HAL_UART_IRQHandler+0x34c>
      return;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <HAL_UART_IRQHandler+0x34c>
      return;
 8004b66:	bf00      	nop
  }
}
 8004b68:	3728      	adds	r7, #40	; 0x28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	08004c97 	.word	0x08004c97

08004b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2222      	movs	r2, #34	; 0x22
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0220 	orr.w	r2, r2, #32
 8004c2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0210 	bic.w	r2, r2, #16
 8004c7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff ff73 	bl	8004b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b21      	cmp	r3, #33	; 0x21
 8004cd0:	d13e      	bne.n	8004d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	d114      	bne.n	8004d06 <UART_Transmit_IT+0x48>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d110      	bne.n	8004d06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	1c9a      	adds	r2, r3, #2
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	621a      	str	r2, [r3, #32]
 8004d04:	e008      	b.n	8004d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6211      	str	r1, [r2, #32]
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	4619      	mov	r1, r3
 8004d26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fef8 	bl	8004b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b22      	cmp	r3, #34	; 0x22
 8004da0:	f040 8087 	bne.w	8004eb2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dac:	d117      	bne.n	8004dde <UART_Receive_IT+0x50>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d113      	bne.n	8004dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28
 8004ddc:	e026      	b.n	8004e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df0:	d007      	beq.n	8004e02 <UART_Receive_IT+0x74>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <UART_Receive_IT+0x82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e008      	b.n	8004e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d136      	bne.n	8004eae <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0220 	bic.w	r2, r2, #32
 8004e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10e      	bne.n	8004e9e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0210 	bic.w	r2, r2, #16
 8004e8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff fe8a 	bl	8004bb0 <HAL_UARTEx_RxEventCallback>
 8004e9c:	e002      	b.n	8004ea4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fe72 	bl	8004b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e002      	b.n	8004eb4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	b09f      	sub	sp, #124	; 0x7c
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed2:	68d9      	ldr	r1, [r3, #12]
 8004ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	ea40 0301 	orr.w	r3, r0, r1
 8004edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f00:	f021 010c 	bic.w	r1, r1, #12
 8004f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1a:	6999      	ldr	r1, [r3, #24]
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	ea40 0301 	orr.w	r3, r0, r1
 8004f24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4bc5      	ldr	r3, [pc, #788]	; (8005240 <UART_SetConfig+0x384>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d004      	beq.n	8004f3a <UART_SetConfig+0x7e>
 8004f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4bc3      	ldr	r3, [pc, #780]	; (8005244 <UART_SetConfig+0x388>)
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d103      	bne.n	8004f42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f3a:	f7ff fb99 	bl	8004670 <HAL_RCC_GetPCLK2Freq>
 8004f3e:	6778      	str	r0, [r7, #116]	; 0x74
 8004f40:	e002      	b.n	8004f48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f42:	f7ff fb81 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8004f46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	f040 80b6 	bne.w	80050c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f56:	461c      	mov	r4, r3
 8004f58:	f04f 0500 	mov.w	r5, #0
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	462b      	mov	r3, r5
 8004f60:	1891      	adds	r1, r2, r2
 8004f62:	6439      	str	r1, [r7, #64]	; 0x40
 8004f64:	415b      	adcs	r3, r3
 8004f66:	647b      	str	r3, [r7, #68]	; 0x44
 8004f68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f6c:	1912      	adds	r2, r2, r4
 8004f6e:	eb45 0303 	adc.w	r3, r5, r3
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f04f 0100 	mov.w	r1, #0
 8004f7a:	00d9      	lsls	r1, r3, #3
 8004f7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f80:	00d0      	lsls	r0, r2, #3
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	1911      	adds	r1, r2, r4
 8004f88:	6639      	str	r1, [r7, #96]	; 0x60
 8004f8a:	416b      	adcs	r3, r5
 8004f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	1891      	adds	r1, r2, r2
 8004f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f9c:	415b      	adcs	r3, r3
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004fa8:	f7fb fd34 	bl	8000a14 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4ba5      	ldr	r3, [pc, #660]	; (8005248 <UART_SetConfig+0x38c>)
 8004fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	011e      	lsls	r6, r3, #4
 8004fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fbc:	461c      	mov	r4, r3
 8004fbe:	f04f 0500 	mov.w	r5, #0
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	462b      	mov	r3, r5
 8004fc6:	1891      	adds	r1, r2, r2
 8004fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004fca:	415b      	adcs	r3, r3
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fd2:	1912      	adds	r2, r2, r4
 8004fd4:	eb45 0303 	adc.w	r3, r5, r3
 8004fd8:	f04f 0000 	mov.w	r0, #0
 8004fdc:	f04f 0100 	mov.w	r1, #0
 8004fe0:	00d9      	lsls	r1, r3, #3
 8004fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fe6:	00d0      	lsls	r0, r2, #3
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	1911      	adds	r1, r2, r4
 8004fee:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ff0:	416b      	adcs	r3, r5
 8004ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	1891      	adds	r1, r2, r2
 8005000:	62b9      	str	r1, [r7, #40]	; 0x28
 8005002:	415b      	adcs	r3, r3
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800500a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800500e:	f7fb fd01 	bl	8000a14 <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4b8c      	ldr	r3, [pc, #560]	; (8005248 <UART_SetConfig+0x38c>)
 8005018:	fba3 1302 	umull	r1, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	2164      	movs	r1, #100	; 0x64
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	3332      	adds	r3, #50	; 0x32
 800502a:	4a87      	ldr	r2, [pc, #540]	; (8005248 <UART_SetConfig+0x38c>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005038:	441e      	add	r6, r3
 800503a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503c:	4618      	mov	r0, r3
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	1894      	adds	r4, r2, r2
 8005048:	623c      	str	r4, [r7, #32]
 800504a:	415b      	adcs	r3, r3
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
 800504e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005052:	1812      	adds	r2, r2, r0
 8005054:	eb41 0303 	adc.w	r3, r1, r3
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	f04f 0500 	mov.w	r5, #0
 8005060:	00dd      	lsls	r5, r3, #3
 8005062:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005066:	00d4      	lsls	r4, r2, #3
 8005068:	4622      	mov	r2, r4
 800506a:	462b      	mov	r3, r5
 800506c:	1814      	adds	r4, r2, r0
 800506e:	653c      	str	r4, [r7, #80]	; 0x50
 8005070:	414b      	adcs	r3, r1
 8005072:	657b      	str	r3, [r7, #84]	; 0x54
 8005074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	461a      	mov	r2, r3
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	1891      	adds	r1, r2, r2
 8005080:	61b9      	str	r1, [r7, #24]
 8005082:	415b      	adcs	r3, r3
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800508a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800508e:	f7fb fcc1 	bl	8000a14 <__aeabi_uldivmod>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4b6c      	ldr	r3, [pc, #432]	; (8005248 <UART_SetConfig+0x38c>)
 8005098:	fba3 1302 	umull	r1, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	2164      	movs	r1, #100	; 0x64
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	3332      	adds	r3, #50	; 0x32
 80050aa:	4a67      	ldr	r2, [pc, #412]	; (8005248 <UART_SetConfig+0x38c>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4432      	add	r2, r6
 80050bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050be:	e0b9      	b.n	8005234 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c2:	461c      	mov	r4, r3
 80050c4:	f04f 0500 	mov.w	r5, #0
 80050c8:	4622      	mov	r2, r4
 80050ca:	462b      	mov	r3, r5
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	6139      	str	r1, [r7, #16]
 80050d0:	415b      	adcs	r3, r3
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050d8:	1912      	adds	r2, r2, r4
 80050da:	eb45 0303 	adc.w	r3, r5, r3
 80050de:	f04f 0000 	mov.w	r0, #0
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	00d9      	lsls	r1, r3, #3
 80050e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ec:	00d0      	lsls	r0, r2, #3
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	eb12 0804 	adds.w	r8, r2, r4
 80050f6:	eb43 0905 	adc.w	r9, r3, r5
 80050fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4618      	mov	r0, r3
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	008b      	lsls	r3, r1, #2
 800510e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005112:	0082      	lsls	r2, r0, #2
 8005114:	4640      	mov	r0, r8
 8005116:	4649      	mov	r1, r9
 8005118:	f7fb fc7c 	bl	8000a14 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4b49      	ldr	r3, [pc, #292]	; (8005248 <UART_SetConfig+0x38c>)
 8005122:	fba3 2302 	umull	r2, r3, r3, r2
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	011e      	lsls	r6, r3, #4
 800512a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512c:	4618      	mov	r0, r3
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	1894      	adds	r4, r2, r2
 8005138:	60bc      	str	r4, [r7, #8]
 800513a:	415b      	adcs	r3, r3
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005142:	1812      	adds	r2, r2, r0
 8005144:	eb41 0303 	adc.w	r3, r1, r3
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	f04f 0500 	mov.w	r5, #0
 8005150:	00dd      	lsls	r5, r3, #3
 8005152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005156:	00d4      	lsls	r4, r2, #3
 8005158:	4622      	mov	r2, r4
 800515a:	462b      	mov	r3, r5
 800515c:	1814      	adds	r4, r2, r0
 800515e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005160:	414b      	adcs	r3, r1
 8005162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4618      	mov	r0, r3
 800516a:	f04f 0100 	mov.w	r1, #0
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	008b      	lsls	r3, r1, #2
 8005178:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800517c:	0082      	lsls	r2, r0, #2
 800517e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005182:	f7fb fc47 	bl	8000a14 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <UART_SetConfig+0x38c>)
 800518c:	fba3 1302 	umull	r1, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	2164      	movs	r1, #100	; 0x64
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	3332      	adds	r3, #50	; 0x32
 800519e:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <UART_SetConfig+0x38c>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051aa:	441e      	add	r6, r3
 80051ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ae:	4618      	mov	r0, r3
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	1894      	adds	r4, r2, r2
 80051ba:	603c      	str	r4, [r7, #0]
 80051bc:	415b      	adcs	r3, r3
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c4:	1812      	adds	r2, r2, r0
 80051c6:	eb41 0303 	adc.w	r3, r1, r3
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	f04f 0500 	mov.w	r5, #0
 80051d2:	00dd      	lsls	r5, r3, #3
 80051d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051d8:	00d4      	lsls	r4, r2, #3
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	eb12 0a00 	adds.w	sl, r2, r0
 80051e2:	eb43 0b01 	adc.w	fp, r3, r1
 80051e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	008b      	lsls	r3, r1, #2
 80051fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051fe:	0082      	lsls	r2, r0, #2
 8005200:	4650      	mov	r0, sl
 8005202:	4659      	mov	r1, fp
 8005204:	f7fb fc06 	bl	8000a14 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <UART_SetConfig+0x38c>)
 800520e:	fba3 1302 	umull	r1, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2164      	movs	r1, #100	; 0x64
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	3332      	adds	r3, #50	; 0x32
 8005220:	4a09      	ldr	r2, [pc, #36]	; (8005248 <UART_SetConfig+0x38c>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4432      	add	r2, r6
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	bf00      	nop
 8005236:	377c      	adds	r7, #124	; 0x7c
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523e:	bf00      	nop
 8005240:	40011000 	.word	0x40011000
 8005244:	40011400 	.word	0x40011400
 8005248:	51eb851f 	.word	0x51eb851f

0800524c <__libc_init_array>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	4d0d      	ldr	r5, [pc, #52]	; (8005284 <__libc_init_array+0x38>)
 8005250:	4c0d      	ldr	r4, [pc, #52]	; (8005288 <__libc_init_array+0x3c>)
 8005252:	1b64      	subs	r4, r4, r5
 8005254:	10a4      	asrs	r4, r4, #2
 8005256:	2600      	movs	r6, #0
 8005258:	42a6      	cmp	r6, r4
 800525a:	d109      	bne.n	8005270 <__libc_init_array+0x24>
 800525c:	4d0b      	ldr	r5, [pc, #44]	; (800528c <__libc_init_array+0x40>)
 800525e:	4c0c      	ldr	r4, [pc, #48]	; (8005290 <__libc_init_array+0x44>)
 8005260:	f000 f820 	bl	80052a4 <_init>
 8005264:	1b64      	subs	r4, r4, r5
 8005266:	10a4      	asrs	r4, r4, #2
 8005268:	2600      	movs	r6, #0
 800526a:	42a6      	cmp	r6, r4
 800526c:	d105      	bne.n	800527a <__libc_init_array+0x2e>
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	f855 3b04 	ldr.w	r3, [r5], #4
 8005274:	4798      	blx	r3
 8005276:	3601      	adds	r6, #1
 8005278:	e7ee      	b.n	8005258 <__libc_init_array+0xc>
 800527a:	f855 3b04 	ldr.w	r3, [r5], #4
 800527e:	4798      	blx	r3
 8005280:	3601      	adds	r6, #1
 8005282:	e7f2      	b.n	800526a <__libc_init_array+0x1e>
 8005284:	080052dc 	.word	0x080052dc
 8005288:	080052dc 	.word	0x080052dc
 800528c:	080052dc 	.word	0x080052dc
 8005290:	080052e0 	.word	0x080052e0

08005294 <memset>:
 8005294:	4402      	add	r2, r0
 8005296:	4603      	mov	r3, r0
 8005298:	4293      	cmp	r3, r2
 800529a:	d100      	bne.n	800529e <memset+0xa>
 800529c:	4770      	bx	lr
 800529e:	f803 1b01 	strb.w	r1, [r3], #1
 80052a2:	e7f9      	b.n	8005298 <memset+0x4>

080052a4 <_init>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr

080052b0 <_fini>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	bf00      	nop
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr
