
ProjectUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c20  08002c20  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c28  08002c28  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000020  08002c50  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002c50  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071b2  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d1  00000000  00000000  00027202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  000287d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00028ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001496b  00000000  00000000  000294f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007771  00000000  00000000  0003de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000815d5  00000000  00000000  000455cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c6ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab0  00000000  00000000  000c6bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002bf0 	.word	0x08002bf0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08002bf0 	.word	0x08002bf0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd5e 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f822 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b6 	bl	800064c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f888 	bl	80005f4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80004e4:	2220      	movs	r2, #32
 80004e6:	490b      	ldr	r1, [pc, #44]	; (8000514 <main+0x44>)
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <main+0x48>)
 80004ea:	f001 fe0d 	bl	8002108 <HAL_UART_Receive_IT>
	   inputchar = UARTRecieveIT();
 80004ee:	f000 f91d 	bl	800072c <UARTRecieveIT>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0x4c>)
 80004f8:	801a      	strh	r2, [r3, #0]
		//if input char == -1 ==> No New data
		if (inputchar != -1)
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <main+0x4c>)
 80004fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000504:	d0ee      	beq.n	80004e4 <main+0x14>
		{
			Communication(inputchar);
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <main+0x4c>)
 8000508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f93d 	bl	800078c <Communication>
	  HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000512:	e7e7      	b.n	80004e4 <main+0x14>
 8000514:	2000003c 	.word	0x2000003c
 8000518:	20000078 	.word	0x20000078
 800051c:	20000000 	.word	0x20000000

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fb56 	bl	8002be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000590:	2310      	movs	r3, #16
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800059e:	2304      	movs	r3, #4
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f8a8 	bl	80016fc <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b2:	f000 fc01 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fb0a 	bl	8001bec <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 fbeb 	bl	8000db8 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_USART2_UART_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_USART2_UART_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000600:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800060c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x50>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000630:	f001 fcd8 	bl	8001fe4 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800063a:	f000 fbbd 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000078 	.word	0x20000078
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a2c      	ldr	r2, [pc, #176]	; (800071c <MX_GPIO_Init+0xd0>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <MX_GPIO_Init+0xd0>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a1e      	ldr	r2, [pc, #120]	; (800071c <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	4812      	ldr	r0, [pc, #72]	; (8000720 <MX_GPIO_Init+0xd4>)
 80006d8:	f000 fff6 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_GPIO_Init+0xd8>)
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_GPIO_Init+0xdc>)
 80006f2:	f000 fe65 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f6:	2320      	movs	r3, #32
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0xd4>)
 800070e:	f000 fe57 	bl	80013c0 <HAL_GPIO_Init>

}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000
 8000724:	10210000 	.word	0x10210000
 8000728:	40020800 	.word	0x40020800

0800072c <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
int16_t UARTRecieveIT()
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000736:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <UARTRecieveIT+0x54>)
 800073a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800073c:	461a      	mov	r2, r3
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <UARTRecieveIT+0x54>)
 8000740:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000742:	b29b      	uxth	r3, r3
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <UARTRecieveIT+0x58>)
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	4293      	cmp	r3, r2
 800074c:	d010      	beq.n	8000770 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <UARTRecieveIT+0x58>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <UARTRecieveIT+0x5c>)
 8000754:	5cd3      	ldrb	r3, [r2, r3]
 8000756:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <UARTRecieveIT+0x58>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <UARTRecieveIT+0x54>)
 8000760:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000762:	fbb3 f1f2 	udiv	r1, r3, r2
 8000766:	fb02 f201 	mul.w	r2, r2, r1
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	4a05      	ldr	r2, [pc, #20]	; (8000784 <UARTRecieveIT+0x58>)
 800076e:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	20000078 	.word	0x20000078
 8000784:	20000068 	.word	0x20000068
 8000788:	2000003c 	.word	0x2000003c

0800078c <Communication>:

void Communication(int16_t dataIn)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
	static uint16_t parameter = 0;
	static uint8_t station[10] = {99,99,99,99,99,99,99,99,99,99};
	static uint16_t checksum = 0;
	static uint8_t check = 0;
	static uint8_t len = 0;
	test = 0;
 8000796:	4baf      	ldr	r3, [pc, #700]	; (8000a54 <Communication+0x2c8>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
	error = 0;
 800079c:	4bae      	ldr	r3, [pc, #696]	; (8000a58 <Communication+0x2cc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		State_CheckSum

	} STATE = State_StartMode;

	//State Machine
	  switch (STATE)
 80007a2:	4bae      	ldr	r3, [pc, #696]	; (8000a5c <Communication+0x2d0>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	f200 829f 	bhi.w	8000cea <Communication+0x55e>
 80007ac:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <Communication+0x28>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	080007c9 	.word	0x080007c9
 80007b8:	0800090b 	.word	0x0800090b
 80007bc:	08000959 	.word	0x08000959
 80007c0:	080008f3 	.word	0x080008f3
 80007c4:	080009a1 	.word	0x080009a1
	  {
	  	  case State_StartMode :
	  		  switch (dataIn)
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	3b91      	subs	r3, #145	; 0x91
 80007ce:	2b0d      	cmp	r3, #13
 80007d0:	f200 828a 	bhi.w	8000ce8 <Communication+0x55c>
 80007d4:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <Communication+0x50>)
 80007d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007da:	bf00      	nop
 80007dc:	08000893 	.word	0x08000893
 80007e0:	08000815 	.word	0x08000815
 80007e4:	08000823 	.word	0x08000823
 80007e8:	080008a7 	.word	0x080008a7
 80007ec:	080008bb 	.word	0x080008bb
 80007f0:	080008cf 	.word	0x080008cf
 80007f4:	080008e3 	.word	0x080008e3
 80007f8:	08000831 	.word	0x08000831
 80007fc:	0800083f 	.word	0x0800083f
 8000800:	0800084d 	.word	0x0800084d
 8000804:	0800085b 	.word	0x0800085b
 8000808:	08000869 	.word	0x08000869
 800080c:	08000877 	.word	0x08000877
 8000810:	08000885 	.word	0x08000885
	  		  {
	  		  	  case 0b10010010 :
	  		  		  mode = 2;		//connect MCU #1
 8000814:	4b92      	ldr	r3, [pc, #584]	; (8000a60 <Communication+0x2d4>)
 8000816:	2202      	movs	r2, #2
 8000818:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 800081a:	4b90      	ldr	r3, [pc, #576]	; (8000a5c <Communication+0x2d0>)
 800081c:	2204      	movs	r2, #4
 800081e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000820:	e066      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10010011 :
	  		  		  mode = 3;		//disconnect MCU #1
 8000822:	4b8f      	ldr	r3, [pc, #572]	; (8000a60 <Communication+0x2d4>)
 8000824:	2203      	movs	r2, #3
 8000826:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8000828:	4b8c      	ldr	r3, [pc, #560]	; (8000a5c <Communication+0x2d0>)
 800082a:	2204      	movs	r2, #4
 800082c:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 800082e:	e05f      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10011000 :
	  		  		  mode = 8;		//go to station/goal position #1
 8000830:	4b8b      	ldr	r3, [pc, #556]	; (8000a60 <Communication+0x2d4>)
 8000832:	2208      	movs	r2, #8
 8000834:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8000836:	4b89      	ldr	r3, [pc, #548]	; (8000a5c <Communication+0x2d0>)
 8000838:	2204      	movs	r2, #4
 800083a:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 800083c:	e058      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10011001 :
	  		  		  mode = 9;		//request current station #1
 800083e:	4b88      	ldr	r3, [pc, #544]	; (8000a60 <Communication+0x2d4>)
 8000840:	2209      	movs	r2, #9
 8000842:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8000844:	4b85      	ldr	r3, [pc, #532]	; (8000a5c <Communication+0x2d0>)
 8000846:	2204      	movs	r2, #4
 8000848:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 800084a:	e051      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10011010 :
	  		  		  mode = 10;	//request angular position #1
 800084c:	4b84      	ldr	r3, [pc, #528]	; (8000a60 <Communication+0x2d4>)
 800084e:	220a      	movs	r2, #10
 8000850:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8000852:	4b82      	ldr	r3, [pc, #520]	; (8000a5c <Communication+0x2d0>)
 8000854:	2204      	movs	r2, #4
 8000856:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000858:	e04a      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10011011 :
	  		  		  mode = 11;	//request max angular velocity #1
 800085a:	4b81      	ldr	r3, [pc, #516]	; (8000a60 <Communication+0x2d4>)
 800085c:	220b      	movs	r2, #11
 800085e:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 8000860:	4b7e      	ldr	r3, [pc, #504]	; (8000a5c <Communication+0x2d0>)
 8000862:	2204      	movs	r2, #4
 8000864:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000866:	e043      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10011100 :
	  		  		  mode = 12;	//enable gripper #1
 8000868:	4b7d      	ldr	r3, [pc, #500]	; (8000a60 <Communication+0x2d4>)
 800086a:	220c      	movs	r2, #12
 800086c:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 800086e:	4b7b      	ldr	r3, [pc, #492]	; (8000a5c <Communication+0x2d0>)
 8000870:	2204      	movs	r2, #4
 8000872:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000874:	e03c      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10011101 :
	  		  		  mode = 13;	//disable gripper #1
 8000876:	4b7a      	ldr	r3, [pc, #488]	; (8000a60 <Communication+0x2d4>)
 8000878:	220d      	movs	r2, #13
 800087a:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 800087c:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <Communication+0x2d0>)
 800087e:	2204      	movs	r2, #4
 8000880:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000882:	e035      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10011110 :
	  		  		  mode = 14;	//set home #1
 8000884:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <Communication+0x2d4>)
 8000886:	220e      	movs	r2, #14
 8000888:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CheckSum;
 800088a:	4b74      	ldr	r3, [pc, #464]	; (8000a5c <Communication+0x2d0>)
 800088c:	2204      	movs	r2, #4
 800088e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000890:	e02e      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10010001 :
	  		  		  mode = 1;		//test command #2
 8000892:	4b73      	ldr	r3, [pc, #460]	; (8000a60 <Communication+0x2d4>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 8000898:	4b72      	ldr	r3, [pc, #456]	; (8000a64 <Communication+0x2d8>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 800089e:	4b6f      	ldr	r3, [pc, #444]	; (8000a5c <Communication+0x2d0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80008a4:	e024      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10010100 :
	  		  		  mode = 4;		//set angular velocity #2
 80008a6:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <Communication+0x2d4>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 80008ac:	4b6d      	ldr	r3, [pc, #436]	; (8000a64 <Communication+0x2d8>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 80008b2:	4b6a      	ldr	r3, [pc, #424]	; (8000a5c <Communication+0x2d0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80008b8:	e01a      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10010101 :
	  		  		  mode = 5;		//set angular position #2
 80008ba:	4b69      	ldr	r3, [pc, #420]	; (8000a60 <Communication+0x2d4>)
 80008bc:	2205      	movs	r2, #5
 80008be:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 80008c0:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <Communication+0x2d8>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 80008c6:	4b65      	ldr	r3, [pc, #404]	; (8000a5c <Communication+0x2d0>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80008cc:	e010      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10010110 :
	  		  		  mode = 6;		//set goal 1 station #2
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <Communication+0x2d4>)
 80008d0:	2206      	movs	r2, #6
 80008d2:	701a      	strb	r2, [r3, #0]
	  		  		  n = 1;
 80008d4:	4b63      	ldr	r3, [pc, #396]	; (8000a64 <Communication+0x2d8>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_CollectData_2;
 80008da:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <Communication+0x2d0>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80008e0:	e006      	b.n	80008f0 <Communication+0x164>

	  		  	  case 0b10010111 :
	  		  		  mode = 7;		//set goal n station #3
 80008e2:	4b5f      	ldr	r3, [pc, #380]	; (8000a60 <Communication+0x2d4>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	701a      	strb	r2, [r3, #0]
	  		  		  STATE = State_Len;
 80008e8:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <Communication+0x2d0>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 80008ee:	bf00      	nop
	  		  }
	  		  break;
 80008f0:	e1fa      	b.n	8000ce8 <Communication+0x55c>

	  	  case State_Len :
	  		len = dataIn;
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b5c      	ldr	r3, [pc, #368]	; (8000a68 <Communication+0x2dc>)
 80008f8:	701a      	strb	r2, [r3, #0]
	  		n = dataIn;
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b59      	ldr	r3, [pc, #356]	; (8000a64 <Communication+0x2d8>)
 8000900:	701a      	strb	r2, [r3, #0]
	  		STATE = State_CollectData_3;
 8000902:	4b56      	ldr	r3, [pc, #344]	; (8000a5c <Communication+0x2d0>)
 8000904:	2202      	movs	r2, #2
 8000906:	701a      	strb	r2, [r3, #0]
	  		break;
 8000908:	e1ef      	b.n	8000cea <Communication+0x55e>

	  	  case State_CollectData_2 :
	  		check += dataIn;
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <Communication+0x2e0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <Communication+0x2e0>)
 8000918:	701a      	strb	r2, [r3, #0]
	  		parameter |= (dataIn & 0xFF) << (8*n);
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b51      	ldr	r3, [pc, #324]	; (8000a64 <Communication+0x2d8>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	4b51      	ldr	r3, [pc, #324]	; (8000a70 <Communication+0x2e4>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21b      	sxth	r3, r3
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b4e      	ldr	r3, [pc, #312]	; (8000a70 <Communication+0x2e4>)
 8000938:	801a      	strh	r2, [r3, #0]
	  		if (n == 0)
 800093a:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <Communication+0x2d8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <Communication+0x1be>
	  		{
	  			STATE = State_CheckSum;
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <Communication+0x2d0>)
 8000944:	2204      	movs	r2, #4
 8000946:	701a      	strb	r2, [r3, #0]
	  			break;
 8000948:	e1cf      	b.n	8000cea <Communication+0x55e>
	  		}
	  		n -= 1;
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <Communication+0x2d8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3b01      	subs	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <Communication+0x2d8>)
 8000954:	701a      	strb	r2, [r3, #0]
	  		break;
 8000956:	e1c8      	b.n	8000cea <Communication+0x55e>

	  	  case State_CollectData_3 :
	  		n -= 1;
 8000958:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <Communication+0x2d8>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	3b01      	subs	r3, #1
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <Communication+0x2d8>)
 8000962:	701a      	strb	r2, [r3, #0]
	  		check += dataIn;
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <Communication+0x2e0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4413      	add	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <Communication+0x2e0>)
 8000972:	701a      	strb	r2, [r3, #0]
	  		if (n == 0)
 8000974:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <Communication+0x2d8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d103      	bne.n	8000984 <Communication+0x1f8>
	  		{
	  			STATE = State_CheckSum;
 800097c:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <Communication+0x2d0>)
 800097e:	2204      	movs	r2, #4
 8000980:	701a      	strb	r2, [r3, #0]
	  			break;
 8000982:	e1b2      	b.n	8000cea <Communication+0x55e>
	  		}
	  		station[n] += dataIn;
 8000984:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <Communication+0x2d8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b3a      	ldr	r3, [pc, #232]	; (8000a74 <Communication+0x2e8>)
 800098c:	5c9a      	ldrb	r2, [r3, r2]
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4934      	ldr	r1, [pc, #208]	; (8000a64 <Communication+0x2d8>)
 8000994:	7809      	ldrb	r1, [r1, #0]
 8000996:	4413      	add	r3, r2
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b36      	ldr	r3, [pc, #216]	; (8000a74 <Communication+0x2e8>)
 800099c:	545a      	strb	r2, [r3, r1]
	  		break;
 800099e:	e1a4      	b.n	8000cea <Communication+0x55e>

	  	  case State_CheckSum :
	  		  switch (mode)
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <Communication+0x2d4>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	2b0d      	cmp	r3, #13
 80009a8:	f200 819f 	bhi.w	8000cea <Communication+0x55e>
 80009ac:	a201      	add	r2, pc, #4	; (adr r2, 80009b4 <Communication+0x228>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009ed 	.word	0x080009ed
 80009b8:	08000a25 	.word	0x08000a25
 80009bc:	08000a7d 	.word	0x08000a7d
 80009c0:	08000aab 	.word	0x08000aab
 80009c4:	08000ae3 	.word	0x08000ae3
 80009c8:	08000b1b 	.word	0x08000b1b
 80009cc:	08000b53 	.word	0x08000b53
 80009d0:	08000b95 	.word	0x08000b95
 80009d4:	08000bc3 	.word	0x08000bc3
 80009d8:	08000bf7 	.word	0x08000bf7
 80009dc:	08000c2b 	.word	0x08000c2b
 80009e0:	08000c5f 	.word	0x08000c5f
 80009e4:	08000c8d 	.word	0x08000c8d
 80009e8:	08000cbb 	.word	0x08000cbb
	  		  {
	  		  	  case 1 :	//test command #2
	  		  		  checksum = ~(0b10010001 + check);
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <Communication+0x2e0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	3391      	adds	r3, #145	; 0x91
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <Communication+0x2ec>)
 80009fc:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 80009fe:	f000 f989 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <Communication+0x2d0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <Communication+0x2ec>)
 8000a0e:	8812      	ldrh	r2, [r2, #0]
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d003      	beq.n	8000a1c <Communication+0x290>
	  		  		  {
	  		  			  error = 1;
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <Communication+0x2cc>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  //blabla
	  		  			  test = 1;
	  		  		  }
	  		  		  break;
 8000a1a:	e166      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 1;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <Communication+0x2c8>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000a22:	e162      	b.n	8000cea <Communication+0x55e>

	  		  	  case 2 : //connect MCU #1
	  		  		  checksum = ~(0b10010010);
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <Communication+0x2ec>)
 8000a26:	f64f 726d 	movw	r2, #65389	; 0xff6d
 8000a2a:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000a2c:	f000 f972 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <Communication+0x2d0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <Communication+0x2ec>)
 8000a3c:	8812      	ldrh	r2, [r2, #0]
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d003      	beq.n	8000a4a <Communication+0x2be>
	  		  		  {
	  		  			  error = 1;
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <Communication+0x2cc>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  //blabla
	  		  			  test = 2;
	  		  		  }
	  		  		  break;
 8000a48:	e14f      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 2;
 8000a4a:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <Communication+0x2c8>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000a50:	e14b      	b.n	8000cea <Communication+0x55e>
 8000a52:	bf00      	nop
 8000a54:	20000066 	.word	0x20000066
 8000a58:	20000067 	.word	0x20000067
 8000a5c:	2000006c 	.word	0x2000006c
 8000a60:	2000006d 	.word	0x2000006d
 8000a64:	2000006e 	.word	0x2000006e
 8000a68:	2000006f 	.word	0x2000006f
 8000a6c:	20000070 	.word	0x20000070
 8000a70:	20000072 	.word	0x20000072
 8000a74:	20000004 	.word	0x20000004
 8000a78:	20000074 	.word	0x20000074

	  		  	  case 3 : //disconnect MCU #1
	  		  		  checksum = ~(0b10010011);
 8000a7c:	4b9d      	ldr	r3, [pc, #628]	; (8000cf4 <Communication+0x568>)
 8000a7e:	f64f 726c 	movw	r2, #65388	; 0xff6c
 8000a82:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000a84:	f000 f946 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000a88:	4b9b      	ldr	r3, [pc, #620]	; (8000cf8 <Communication+0x56c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	4a98      	ldr	r2, [pc, #608]	; (8000cf4 <Communication+0x568>)
 8000a94:	8812      	ldrh	r2, [r2, #0]
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d003      	beq.n	8000aa2 <Communication+0x316>
	  		  		  {
	  		  			  error = 1;
 8000a9a:	4b98      	ldr	r3, [pc, #608]	; (8000cfc <Communication+0x570>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
	  		  		  {
	  		  			  //STATE = State_StartMode;
	  		  			  test = 3;
	  		  		  }

	  		  		  break;
 8000aa0:	e123      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 3;
 8000aa2:	4b97      	ldr	r3, [pc, #604]	; (8000d00 <Communication+0x574>)
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000aa8:	e11f      	b.n	8000cea <Communication+0x55e>

	  		  	  case 4 : //set angular velocity #2
	  		  		  checksum = ~(0b10010100 + check);
 8000aaa:	4b96      	ldr	r3, [pc, #600]	; (8000d04 <Communication+0x578>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	3394      	adds	r3, #148	; 0x94
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b8e      	ldr	r3, [pc, #568]	; (8000cf4 <Communication+0x568>)
 8000aba:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000abc:	f000 f92a 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000ac0:	4b8d      	ldr	r3, [pc, #564]	; (8000cf8 <Communication+0x56c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aca:	4a8a      	ldr	r2, [pc, #552]	; (8000cf4 <Communication+0x568>)
 8000acc:	8812      	ldrh	r2, [r2, #0]
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d003      	beq.n	8000ada <Communication+0x34e>
	  		  		  {
	  		  			  error = 1;
 8000ad2:	4b8a      	ldr	r3, [pc, #552]	; (8000cfc <Communication+0x570>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
		  		  		  //velocity = parameter;
	  		  			  test = 4;
	  		  		  }
	  		  		  break;
 8000ad8:	e107      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 4;
 8000ada:	4b89      	ldr	r3, [pc, #548]	; (8000d00 <Communication+0x574>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000ae0:	e103      	b.n	8000cea <Communication+0x55e>

	  		  	  case 5 : //set angular position #2
	  		  		  checksum = ~(0b10010101 + check);
 8000ae2:	4b88      	ldr	r3, [pc, #544]	; (8000d04 <Communication+0x578>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	3395      	adds	r3, #149	; 0x95
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b80      	ldr	r3, [pc, #512]	; (8000cf4 <Communication+0x568>)
 8000af2:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000af4:	f000 f90e 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000af8:	4b7f      	ldr	r3, [pc, #508]	; (8000cf8 <Communication+0x56c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b02:	4a7c      	ldr	r2, [pc, #496]	; (8000cf4 <Communication+0x568>)
 8000b04:	8812      	ldrh	r2, [r2, #0]
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d003      	beq.n	8000b12 <Communication+0x386>
	  		  		  {
	  		  			  error = 1;
 8000b0a:	4b7c      	ldr	r3, [pc, #496]	; (8000cfc <Communication+0x570>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
		  		  		  //position = parameter;
	  		  			  test = 5;
	  		  		  }
	  		  		  break;
 8000b10:	e0eb      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 5;
 8000b12:	4b7b      	ldr	r3, [pc, #492]	; (8000d00 <Communication+0x574>)
 8000b14:	2205      	movs	r2, #5
 8000b16:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000b18:	e0e7      	b.n	8000cea <Communication+0x55e>

	  		  	  case 6 : //set goal 1 station #2
	  		  		  checksum = ~(0b10010110 + check);
 8000b1a:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <Communication+0x578>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	3396      	adds	r3, #150	; 0x96
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <Communication+0x568>)
 8000b2a:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000b2c:	f000 f8f2 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000b30:	4b71      	ldr	r3, [pc, #452]	; (8000cf8 <Communication+0x56c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3a:	4a6e      	ldr	r2, [pc, #440]	; (8000cf4 <Communication+0x568>)
 8000b3c:	8812      	ldrh	r2, [r2, #0]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d003      	beq.n	8000b4a <Communication+0x3be>
	  		  		  {
	  		  			  error = 1;
 8000b42:	4b6e      	ldr	r3, [pc, #440]	; (8000cfc <Communication+0x570>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
		  		  		  //station = parameter;
	  		  			  test = 6;
	  		  		  }
	  		  		  break;
 8000b48:	e0cf      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 6;
 8000b4a:	4b6d      	ldr	r3, [pc, #436]	; (8000d00 <Communication+0x574>)
 8000b4c:	2206      	movs	r2, #6
 8000b4e:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000b50:	e0cb      	b.n	8000cea <Communication+0x55e>

	  		  	  case 7 : //set goal n station #3
	  		  		  checksum = ~(0b10010111 + len + check);
 8000b52:	4b6d      	ldr	r3, [pc, #436]	; (8000d08 <Communication+0x57c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b6a      	ldr	r3, [pc, #424]	; (8000d04 <Communication+0x578>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	3397      	adds	r3, #151	; 0x97
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b62      	ldr	r3, [pc, #392]	; (8000cf4 <Communication+0x568>)
 8000b6c:	801a      	strh	r2, [r3, #0]
	  		  		  for (uint8_t i = len - 1 ; i >= 0 ; i--)
 8000b6e:	4b66      	ldr	r3, [pc, #408]	; (8000d08 <Communication+0x57c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
	  		  		  {
	  		  			  nstation[len - i - 1] = station[i];
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	4b63      	ldr	r3, [pc, #396]	; (8000d08 <Communication+0x57c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	1acb      	subs	r3, r1, r3
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4961      	ldr	r1, [pc, #388]	; (8000d0c <Communication+0x580>)
 8000b86:	5c89      	ldrb	r1, [r1, r2]
 8000b88:	4a61      	ldr	r2, [pc, #388]	; (8000d10 <Communication+0x584>)
 8000b8a:	54d1      	strb	r1, [r2, r3]
	  		  		  for (uint8_t i = len - 1 ; i >= 0 ; i--)
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
	  		  			  nstation[len - i - 1] = station[i];
 8000b92:	e7f0      	b.n	8000b76 <Communication+0x3ea>
	  		  			  test = 7;
	  		  		  }
	  		  		  break;

	  		  	  case 8 : //go to station/goal position #1
	  		  		  checksum = ~(0b10011000);
 8000b94:	4b57      	ldr	r3, [pc, #348]	; (8000cf4 <Communication+0x568>)
 8000b96:	f64f 7267 	movw	r2, #65383	; 0xff67
 8000b9a:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000b9c:	f000 f8ba 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000ba0:	4b55      	ldr	r3, [pc, #340]	; (8000cf8 <Communication+0x56c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000baa:	4a52      	ldr	r2, [pc, #328]	; (8000cf4 <Communication+0x568>)
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d003      	beq.n	8000bba <Communication+0x42e>
	  		  		  {
	  		  			  error = 1;
 8000bb2:	4b52      	ldr	r3, [pc, #328]	; (8000cfc <Communication+0x570>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  //blabla
	  		  			  test = 8;
	  		  		  }
	  		  		  break;
 8000bb8:	e097      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 8;
 8000bba:	4b51      	ldr	r3, [pc, #324]	; (8000d00 <Communication+0x574>)
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000bc0:	e093      	b.n	8000cea <Communication+0x55e>

	  		  	  case 9 : //request current station #1
	  		  		  checksum = ~(0b10011001);
 8000bc2:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <Communication+0x568>)
 8000bc4:	f64f 7266 	movw	r2, #65382	; 0xff66
 8000bc8:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000bca:	f000 f8a3 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000bce:	4b4a      	ldr	r3, [pc, #296]	; (8000cf8 <Communication+0x56c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd8:	4a46      	ldr	r2, [pc, #280]	; (8000cf4 <Communication+0x568>)
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d003      	beq.n	8000be8 <Communication+0x45c>
	  		  		  {
	  		  			  error = 1;
 8000be0:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <Communication+0x570>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  request(9);
	  		  			  test = 9;
	  		  		  }
	  		  		  break;
 8000be6:	e080      	b.n	8000cea <Communication+0x55e>
	  		  			  request(9);
 8000be8:	2009      	movs	r0, #9
 8000bea:	f000 f8a1 	bl	8000d30 <request>
	  		  			  test = 9;
 8000bee:	4b44      	ldr	r3, [pc, #272]	; (8000d00 <Communication+0x574>)
 8000bf0:	2209      	movs	r2, #9
 8000bf2:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000bf4:	e079      	b.n	8000cea <Communication+0x55e>

	  		  	  case 10 : //request angular position #1
	  		  		  checksum = ~(0b10011010);
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <Communication+0x568>)
 8000bf8:	f64f 7265 	movw	r2, #65381	; 0xff65
 8000bfc:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000bfe:	f000 f889 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000c02:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <Communication+0x56c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0c:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <Communication+0x568>)
 8000c0e:	8812      	ldrh	r2, [r2, #0]
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d003      	beq.n	8000c1c <Communication+0x490>
	  		  		  {
	  		  			  error = 1;
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <Communication+0x570>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  request(10);
	  		  			  test = 10;
	  		  		  }
	  		  		  break;
 8000c1a:	e066      	b.n	8000cea <Communication+0x55e>
	  		  			  request(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f000 f887 	bl	8000d30 <request>
	  		  			  test = 10;
 8000c22:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <Communication+0x574>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000c28:	e05f      	b.n	8000cea <Communication+0x55e>

	  		  	  case 11 : //request max angular velocity #1
	  		  		  checksum = ~(0b10011011);
 8000c2a:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <Communication+0x568>)
 8000c2c:	f64f 7264 	movw	r2, #65380	; 0xff64
 8000c30:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000c32:	f000 f86f 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <Communication+0x56c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c40:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <Communication+0x568>)
 8000c42:	8812      	ldrh	r2, [r2, #0]
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d003      	beq.n	8000c50 <Communication+0x4c4>
	  		  		  {
	  		  			  error = 1;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <Communication+0x570>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  request(11);
	  		  			  test = 11;
	  		  		  }
	  		  		  break;
 8000c4e:	e04c      	b.n	8000cea <Communication+0x55e>
	  		  			  request(11);
 8000c50:	200b      	movs	r0, #11
 8000c52:	f000 f86d 	bl	8000d30 <request>
	  		  			  test = 11;
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <Communication+0x574>)
 8000c58:	220b      	movs	r2, #11
 8000c5a:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000c5c:	e045      	b.n	8000cea <Communication+0x55e>

	  		  	  case 12 : //enable gripper #1
	  		  		  checksum = ~(0b10011100);
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <Communication+0x568>)
 8000c60:	f64f 7263 	movw	r2, #65379	; 0xff63
 8000c64:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000c66:	f000 f855 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <Communication+0x56c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <Communication+0x568>)
 8000c76:	8812      	ldrh	r2, [r2, #0]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d003      	beq.n	8000c84 <Communication+0x4f8>
	  		  		  {
	  		  			  error = 1;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <Communication+0x570>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  //blabla
	  		  			  test = 12;
	  		  		  }
	  		  		  break;
 8000c82:	e032      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 12;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <Communication+0x574>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000c8a:	e02e      	b.n	8000cea <Communication+0x55e>

	  		  	  case 13 : //disable gripper #1
	  		  		  checksum = ~(0b10011101);
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <Communication+0x568>)
 8000c8e:	f64f 7262 	movw	r2, #65378	; 0xff62
 8000c92:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000c94:	f000 f83e 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <Communication+0x56c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca2:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <Communication+0x568>)
 8000ca4:	8812      	ldrh	r2, [r2, #0]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d003      	beq.n	8000cb2 <Communication+0x526>
	  		  		  {
	  		  			  error = 1;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <Communication+0x570>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  //blabla
	  		  			  test = 13;
	  		  		  }
	  		  		  break;
 8000cb0:	e01b      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 13;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <Communication+0x574>)
 8000cb4:	220d      	movs	r2, #13
 8000cb6:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000cb8:	e017      	b.n	8000cea <Communication+0x55e>

	  		  	  case 14 : //set home #1
	  		  		  checksum = ~(0b10011110);
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <Communication+0x568>)
 8000cbc:	f64f 7261 	movw	r2, #65377	; 0xff61
 8000cc0:	801a      	strh	r2, [r3, #0]
	  		  		  ACK1();
 8000cc2:	f000 f827 	bl	8000d14 <ACK1>
	  		  		  STATE = State_StartMode;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <Communication+0x56c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
	  		  		  if (dataIn != checksum)
 8000ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd0:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <Communication+0x568>)
 8000cd2:	8812      	ldrh	r2, [r2, #0]
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d003      	beq.n	8000ce0 <Communication+0x554>
	  		  		  {
	  		  			  error = 1;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <Communication+0x570>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
	  		  		  else
	  		  		  {
	  		  			  //sethome = 1;
	  		  			  test = 14;
	  		  		  }
	  		  		  break;
 8000cde:	e004      	b.n	8000cea <Communication+0x55e>
	  		  			  test = 14;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <Communication+0x574>)
 8000ce2:	220e      	movs	r2, #14
 8000ce4:	701a      	strb	r2, [r3, #0]
	  		  		  break;
 8000ce6:	e000      	b.n	8000cea <Communication+0x55e>
	  		  break;
 8000ce8:	bf00      	nop
	  		  }
	  }
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000074 	.word	0x20000074
 8000cf8:	2000006c 	.word	0x2000006c
 8000cfc:	20000067 	.word	0x20000067
 8000d00:	20000066 	.word	0x20000066
 8000d04:	20000070 	.word	0x20000070
 8000d08:	2000006f 	.word	0x2000006f
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	2000005c 	.word	0x2000005c

08000d14 <ACK1>:

void ACK1()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	static uint8_t ack1[2] = {0x58,0b01110101};
	HAL_UART_Transmit_IT(&huart2, ack1, 2);
 8000d18:	2202      	movs	r2, #2
 8000d1a:	4903      	ldr	r1, [pc, #12]	; (8000d28 <ACK1+0x14>)
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <ACK1+0x18>)
 8000d1e:	f001 f9ae 	bl	800207e <HAL_UART_Transmit_IT>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	20000078 	.word	0x20000078

08000d30 <request>:
	static uint8_t ack2[2] = {70,110};
	HAL_UART_Transmit_IT(&huart2, ack2, 2);
}

void request(uint8_t mode)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	if (mode == 9)		//request current station >> #2
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	d10e      	bne.n	8000d5e <request+0x2e>
	{
		uint8_t requested[] = {0b10011001, 0b00, 0b00, 0b00};
 8000d40:	2399      	movs	r3, #153	; 0x99
 8000d42:	617b      	str	r3, [r7, #20]
		//requested[2] = velocity;
		requested[3] = ~(0b10011001 + requested[2]);
 8000d44:	7dbb      	ldrb	r3, [r7, #22]
 8000d46:	3b67      	subs	r3, #103	; 0x67
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_IT(&huart2, requested, 4);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2204      	movs	r2, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4816      	ldr	r0, [pc, #88]	; (8000db4 <request+0x84>)
 8000d5a:	f001 f990 	bl	800207e <HAL_UART_Transmit_IT>
	}

	if (mode == 10)		//request angular position >> #2
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b0a      	cmp	r3, #10
 8000d62:	d111      	bne.n	8000d88 <request+0x58>
	{
		uint8_t requested[] = {0b10011010, 0b00, 0b00, 0b00};
 8000d64:	239a      	movs	r3, #154	; 0x9a
 8000d66:	613b      	str	r3, [r7, #16]
		//requested[1] = velocity >> 8;
		//requested[2] = velocity;
		requested[3] = ~(0b10011010 + requested[1] + requested[2]);
 8000d68:	7c7a      	ldrb	r2, [r7, #17]
 8000d6a:	7cbb      	ldrb	r3, [r7, #18]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	3b66      	subs	r3, #102	; 0x66
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	74fb      	strb	r3, [r7, #19]
		HAL_UART_Transmit_IT(&huart2, requested, 4);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	480c      	ldr	r0, [pc, #48]	; (8000db4 <request+0x84>)
 8000d84:	f001 f97b 	bl	800207e <HAL_UART_Transmit_IT>
	}

	if (mode == 11)		//request max angular velocity >> #2
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b0b      	cmp	r3, #11
 8000d8c:	d10e      	bne.n	8000dac <request+0x7c>
	{
		uint8_t requested[] = {0b10011011, 0b00, 0b00, 0b00};
 8000d8e:	239b      	movs	r3, #155	; 0x9b
 8000d90:	60fb      	str	r3, [r7, #12]
		//requested[2] = velocity;
		requested[3] = ~(0b10011011 + requested[2]);
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	3b65      	subs	r3, #101	; 0x65
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_IT(&huart2, requested, 4);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2204      	movs	r2, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <request+0x84>)
 8000da8:	f001 f969 	bl	800207e <HAL_UART_Transmit_IT>
	}
}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000078 	.word	0x20000078

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e02:	2007      	movs	r0, #7
 8000e04:	f000 fa08 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <HAL_UART_MspInit+0x94>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d133      	bne.n	8000e9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_UART_MspInit+0x98>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <HAL_UART_MspInit+0x98>)
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_UART_MspInit+0x98>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_UART_MspInit+0x98>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a14      	ldr	r2, [pc, #80]	; (8000eac <HAL_UART_MspInit+0x98>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_UART_MspInit+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <HAL_UART_MspInit+0x9c>)
 8000e8a:	f000 fa99 	bl	80013c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2026      	movs	r0, #38	; 0x26
 8000e94:	f000 f9cb 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e98:	2026      	movs	r0, #38	; 0x26
 8000e9a:	f000 f9e4 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f89a 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <USART2_IRQHandler+0x10>)
 8000f0e:	f001 f92b 	bl	8002168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000078 	.word	0x20000078

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f001 fe13 	bl	8002b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff faad 	bl	80004d0 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000f84:	08002c30 	.word	0x08002c30
  ldr r2, =_sbss
 8000f88:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000f8c:	200000c0 	.word	0x200000c0

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f92b 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fefc 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f943 	bl	8001282 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f90b 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000014 	.word	0x20000014
 8001030:	2000001c 	.word	0x2000001c
 8001034:	20000018 	.word	0x20000018

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000001c 	.word	0x2000001c
 800105c:	200000bc 	.word	0x200000bc

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200000bc 	.word	0x200000bc

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff29 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff3e 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff8e 	bl	800116c <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff31 	bl	80010dc <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa2 	bl	80011d4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff feda 	bl	8001060 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d008      	beq.n	80012cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e052      	b.n	8001372 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0216 	bic.w	r2, r2, #22
 80012da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d103      	bne.n	80012fc <HAL_DMA_Abort+0x62>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0208 	bic.w	r2, r2, #8
 800130a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	e013      	b.n	8001346 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131e:	f7ff fe9f 	bl	8001060 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b05      	cmp	r3, #5
 800132a:	d90c      	bls.n	8001346 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e015      	b.n	8001372 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e4      	bne.n	800131e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	223f      	movs	r2, #63	; 0x3f
 800135a:	409a      	lsls	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d004      	beq.n	8001398 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e00c      	b.n	80013b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2205      	movs	r2, #5
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e159      	b.n	8001690 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	f040 8148 	bne.w	800168a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	2b02      	cmp	r3, #2
 8001410:	d130      	bne.n	8001474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	d017      	beq.n	80014b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d123      	bne.n	8001504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80a2 	beq.w	800168a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a56      	ldr	r2, [pc, #344]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b54      	ldr	r3, [pc, #336]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001562:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x2ec>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d019      	beq.n	80015c2 <HAL_GPIO_Init+0x202>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <HAL_GPIO_Init+0x2f4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <HAL_GPIO_Init+0x1fe>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d00d      	beq.n	80015ba <HAL_GPIO_Init+0x1fa>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d007      	beq.n	80015b6 <HAL_GPIO_Init+0x1f6>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <HAL_GPIO_Init+0x300>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d101      	bne.n	80015b2 <HAL_GPIO_Init+0x1f2>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e008      	b.n	80015c4 <HAL_GPIO_Init+0x204>
 80015b2:	2307      	movs	r3, #7
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x204>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e004      	b.n	80015c4 <HAL_GPIO_Init+0x204>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_Init+0x204>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x204>
 80015c2:	2300      	movs	r3, #0
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4093      	lsls	r3, r2
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d4:	4935      	ldr	r1, [pc, #212]	; (80016ac <HAL_GPIO_Init+0x2ec>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_GPIO_Init+0x304>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <HAL_GPIO_Init+0x304>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001630:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165a:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <HAL_GPIO_Init+0x304>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001684:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	f67f aea2 	bls.w	80013dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e264      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d075      	beq.n	8001806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800171a:	4ba3      	ldr	r3, [pc, #652]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b04      	cmp	r3, #4
 8001724:	d00c      	beq.n	8001740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001726:	4ba0      	ldr	r3, [pc, #640]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800172e:	2b08      	cmp	r3, #8
 8001730:	d112      	bne.n	8001758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b9d      	ldr	r3, [pc, #628]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800173e:	d10b      	bne.n	8001758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	4b99      	ldr	r3, [pc, #612]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d05b      	beq.n	8001804 <HAL_RCC_OscConfig+0x108>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d157      	bne.n	8001804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e23f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x74>
 8001762:	4b91      	ldr	r3, [pc, #580]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a90      	ldr	r2, [pc, #576]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a8a      	ldr	r2, [pc, #552]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a87      	ldr	r2, [pc, #540]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001794:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a83      	ldr	r2, [pc, #524]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a80      	ldr	r2, [pc, #512]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fc54 	bl	8001060 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fc50 	bl	8001060 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e204      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xc0>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fc40 	bl	8001060 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fc3c 	bl	8001060 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1f0      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b6c      	ldr	r3, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0xe8>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001812:	4b65      	ldr	r3, [pc, #404]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181e:	4b62      	ldr	r3, [pc, #392]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x152>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1c4      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4952      	ldr	r1, [pc, #328]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e03a      	b.n	80018da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <HAL_RCC_OscConfig+0x2b0>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fbf5 	bl	8001060 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fbf1 	bl	8001060 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1a5      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4940      	ldr	r1, [pc, #256]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_RCC_OscConfig+0x2b0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fbd4 	bl	8001060 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fbd0 	bl	8001060 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e184      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d030      	beq.n	8001948 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d016      	beq.n	800191c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_RCC_OscConfig+0x2b4>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fbb4 	bl	8001060 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fbb0 	bl	8001060 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e164      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x200>
 800191a:	e015      	b.n	8001948 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_OscConfig+0x2b4>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fb9d 	bl	8001060 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fb99 	bl	8001060 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e14d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80a0 	beq.w	8001a96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10f      	bne.n	8001986 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_OscConfig+0x2b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d121      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_RCC_OscConfig+0x2b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_RCC_OscConfig+0x2b8>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7ff fb5f 	bl	8001060 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	e011      	b.n	80019ca <HAL_RCC_OscConfig+0x2ce>
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42470000 	.word	0x42470000
 80019b0:	42470e80 	.word	0x42470e80
 80019b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b8:	f7ff fb52 	bl	8001060 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e106      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <HAL_RCC_OscConfig+0x4e4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x2f0>
 80019de:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a80      	ldr	r2, [pc, #512]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x32a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x312>
 80019f4:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a7a      	ldr	r2, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	4b78      	ldr	r3, [pc, #480]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a77      	ldr	r2, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x32a>
 8001a0e:	4b75      	ldr	r3, [pc, #468]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1a:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a71      	ldr	r2, [pc, #452]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb17 	bl	8001060 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fb13 	bl	8001060 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0c5      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x33a>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fb01 	bl	8001060 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fafd 	bl	8001060 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0af      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a55      	ldr	r2, [pc, #340]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 809b 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d05c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d141      	bne.n	8001b38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <HAL_RCC_OscConfig+0x4ec>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fad1 	bl	8001060 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff facd 	bl	8001060 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e081      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	019b      	lsls	r3, r3, #6
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	3b01      	subs	r3, #1
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	061b      	lsls	r3, r3, #24
 8001b04:	4937      	ldr	r1, [pc, #220]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_RCC_OscConfig+0x4ec>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff faa6 	bl	8001060 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff faa2 	bl	8001060 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e056      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x41c>
 8001b36:	e04e      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_RCC_OscConfig+0x4ec>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fa8f 	bl	8001060 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fa8b 	bl	8001060 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e03f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x44a>
 8001b64:	e037      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e032      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d028      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d121      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d11a      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d111      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40007000 	.word	0x40007000
 8001be4:	40023800 	.word	0x40023800
 8001be8:	42470060 	.word	0x42470060

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cc      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d90c      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d044      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e06f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e067      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4934      	ldr	r1, [pc, #208]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f9c0 	bl	8001060 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f9bc 	bl	8001060 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e04f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d20c      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f920 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08002c08 	.word	0x08002c08
 8001db0:	20000014 	.word	0x20000014
 8001db4:	20000018 	.word	0x20000018

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd0:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d00d      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	f200 80bd 	bhi.w	8001f5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x34>
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dea:	e0b7      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dee:	60bb      	str	r3, [r7, #8]
       break;
 8001df0:	e0b7      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001df2:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001df4:	60bb      	str	r3, [r7, #8]
      break;
 8001df6:	e0b4      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df8:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e02:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d04d      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0e:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	461a      	mov	r2, r3
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e1e:	f04f 0100 	mov.w	r1, #0
 8001e22:	ea02 0800 	and.w	r8, r2, r0
 8001e26:	ea03 0901 	and.w	r9, r3, r1
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	014b      	lsls	r3, r1, #5
 8001e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e3c:	0142      	lsls	r2, r0, #5
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	ebb0 0008 	subs.w	r0, r0, r8
 8001e46:	eb61 0109 	sbc.w	r1, r1, r9
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	018b      	lsls	r3, r1, #6
 8001e54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e58:	0182      	lsls	r2, r0, #6
 8001e5a:	1a12      	subs	r2, r2, r0
 8001e5c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	00d9      	lsls	r1, r3, #3
 8001e6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e6e:	00d0      	lsls	r0, r2, #3
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	eb12 0208 	adds.w	r2, r2, r8
 8001e78:	eb43 0309 	adc.w	r3, r3, r9
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	0259      	lsls	r1, r3, #9
 8001e86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e8a:	0250      	lsls	r0, r2, #9
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f7fe f99c 	bl	80001d8 <__aeabi_uldivmod>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e04a      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	099b      	lsrs	r3, r3, #6
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	ea02 0400 	and.w	r4, r2, r0
 8001ec2:	ea03 0501 	and.w	r5, r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	014b      	lsls	r3, r1, #5
 8001ed4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ed8:	0142      	lsls	r2, r0, #5
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	1b00      	subs	r0, r0, r4
 8001ee0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	018b      	lsls	r3, r1, #6
 8001eee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ef2:	0182      	lsls	r2, r0, #6
 8001ef4:	1a12      	subs	r2, r2, r0
 8001ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8001efa:	f04f 0000 	mov.w	r0, #0
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	00d9      	lsls	r1, r3, #3
 8001f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f08:	00d0      	lsls	r0, r2, #3
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	1912      	adds	r2, r2, r4
 8001f10:	eb45 0303 	adc.w	r3, r5, r3
 8001f14:	f04f 0000 	mov.w	r0, #0
 8001f18:	f04f 0100 	mov.w	r1, #0
 8001f1c:	0299      	lsls	r1, r3, #10
 8001f1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f22:	0290      	lsls	r0, r2, #10
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	f7fe f950 	bl	80001d8 <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	60bb      	str	r3, [r7, #8]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f5e:	60bb      	str	r3, [r7, #8]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	68bb      	ldr	r3, [r7, #8]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	007a1200 	.word	0x007a1200

08001f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000014 	.word	0x20000014

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f98:	f7ff fff0 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0a9b      	lsrs	r3, r3, #10
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4903      	ldr	r1, [pc, #12]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08002c18 	.word	0x08002c18

08001fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc0:	f7ff ffdc 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	0b5b      	lsrs	r3, r3, #13
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4903      	ldr	r1, [pc, #12]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	08002c18 	.word	0x08002c18

08001fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e03f      	b.n	8002076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe ff02 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	; 0x24
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fbed 	bl	8002808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800203c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800204c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800205c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	4613      	mov	r3, r2
 800208a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b20      	cmp	r3, #32
 8002096:	d130      	bne.n	80020fa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_UART_Transmit_IT+0x26>
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e029      	b.n	80020fc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Transmit_IT+0x38>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e022      	b.n	80020fc <HAL_UART_Transmit_IT+0x7e>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2221      	movs	r2, #33	; 0x21
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	d11d      	bne.n	800215e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_UART_Receive_IT+0x26>
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e016      	b.n	8002160 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_UART_Receive_IT+0x38>
 800213c:	2302      	movs	r3, #2
 800213e:	e00f      	b.n	8002160 <HAL_UART_Receive_IT+0x58>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	461a      	mov	r2, r3
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f9dd 	bl	8002514 <UART_Start_Receive_IT>
 800215a:	4603      	mov	r3, r0
 800215c:	e000      	b.n	8002160 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800215e:	2302      	movs	r3, #2
  }
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_UART_IRQHandler+0x52>
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa91 	bl	80026da <UART_Receive_IT>
      return;
 80021b8:	e17c      	b.n	80024b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80b1 	beq.w	8002324 <HAL_UART_IRQHandler+0x1bc>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_UART_IRQHandler+0x70>
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80a6 	beq.w	8002324 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_UART_IRQHandler+0x90>
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_UART_IRQHandler+0xb0>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f043 0202 	orr.w	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_UART_IRQHandler+0xd0>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f043 0204 	orr.w	r2, r3, #4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00f      	beq.n	8002262 <HAL_UART_IRQHandler+0xfa>
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <HAL_UART_IRQHandler+0xee>
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0208 	orr.w	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 811f 	beq.w	80024aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_UART_IRQHandler+0x11e>
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fa2a 	bl	80026da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <HAL_UART_IRQHandler+0x146>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d031      	beq.n	8002312 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f96a 	bl	8002588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d123      	bne.n	800230a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d013      	beq.n	8002302 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_UART_IRQHandler+0x354>)
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f847 	bl	800137a <HAL_DMA_Abort_IT>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022fc:	4610      	mov	r0, r2
 80022fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002300:	e00e      	b.n	8002320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f8f0 	bl	80024e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002308:	e00a      	b.n	8002320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8ec 	bl	80024e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002310:	e006      	b.n	8002320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8e8 	bl	80024e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800231e:	e0c4      	b.n	80024aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002320:	bf00      	nop
    return;
 8002322:	e0c2      	b.n	80024aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	2b01      	cmp	r3, #1
 800232a:	f040 80a2 	bne.w	8002472 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 809c 	beq.w	8002472 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8096 	beq.w	8002472 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d14f      	bne.n	800240a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002374:	8a3b      	ldrh	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8099 	beq.w	80024ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002380:	8a3a      	ldrh	r2, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	f080 8093 	bcs.w	80024ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8a3a      	ldrh	r2, [r7, #16]
 800238c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002398:	d02b      	beq.n	80023f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0210 	bic.w	r2, r2, #16
 80023e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe ff54 	bl	800129a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f87a 	bl	80024fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002408:	e051      	b.n	80024ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002412:	b29b      	uxth	r3, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d047      	beq.n	80024b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002422:	8a7b      	ldrh	r3, [r7, #18]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d044      	beq.n	80024b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002436:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0210 	bic.w	r2, r2, #16
 8002464:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002466:	8a7b      	ldrh	r3, [r7, #18]
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f846 	bl	80024fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002470:	e01f      	b.n	80024b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x326>
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8bf 	bl	800260a <UART_Transmit_IT>
    return;
 800248c:	e012      	b.n	80024b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <HAL_UART_IRQHandler+0x34c>
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f901 	bl	80026aa <UART_EndTransmit_IT>
    return;
 80024a8:	e004      	b.n	80024b4 <HAL_UART_IRQHandler+0x34c>
    return;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80024b2:	bf00      	nop
  }
}
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	080025e3 	.word	0x080025e3

080024c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2222      	movs	r2, #34	; 0x22
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002558:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800259e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0210 	bic.w	r2, r2, #16
 80025c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ff73 	bl	80024e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b21      	cmp	r3, #33	; 0x21
 800261c:	d13e      	bne.n	800269c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	d114      	bne.n	8002652 <UART_Transmit_IT+0x48>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d110      	bne.n	8002652 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002644:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	1c9a      	adds	r2, r3, #2
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	621a      	str	r2, [r3, #32]
 8002650:	e008      	b.n	8002664 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	1c59      	adds	r1, r3, #1
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6211      	str	r1, [r2, #32]
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4619      	mov	r1, r3
 8002672:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10f      	bne.n	8002698 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002686:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002696:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fef8 	bl	80024c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b22      	cmp	r3, #34	; 0x22
 80026ec:	f040 8087 	bne.w	80027fe <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f8:	d117      	bne.n	800272a <UART_Receive_IT+0x50>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d113      	bne.n	800272a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002718:	b29a      	uxth	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
 8002728:	e026      	b.n	8002778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273c:	d007      	beq.n	800274e <UART_Receive_IT+0x74>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <UART_Receive_IT+0x82>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e008      	b.n	800276e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29b      	uxth	r3, r3
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4619      	mov	r1, r3
 8002786:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002788:	2b00      	cmp	r3, #0
 800278a:	d136      	bne.n	80027fa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0220 	bic.w	r2, r2, #32
 800279a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10e      	bne.n	80027ea <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0210 	bic.w	r2, r2, #16
 80027da:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fe8a 	bl	80024fc <HAL_UARTEx_RxEventCallback>
 80027e8:	e002      	b.n	80027f0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fe72 	bl	80024d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e002      	b.n	8002800 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280c:	b09f      	sub	sp, #124	; 0x7c
 800280e:	af00      	add	r7, sp, #0
 8002810:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800281c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	ea40 0301 	orr.w	r3, r0, r1
 8002828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800282a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	431a      	orrs	r2, r3
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	431a      	orrs	r2, r3
 800283a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4313      	orrs	r3, r2
 8002840:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800284c:	f021 010c 	bic.w	r1, r1, #12
 8002850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002856:	430b      	orrs	r3, r1
 8002858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002866:	6999      	ldr	r1, [r3, #24]
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	ea40 0301 	orr.w	r3, r0, r1
 8002870:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4bc5      	ldr	r3, [pc, #788]	; (8002b8c <UART_SetConfig+0x384>)
 8002878:	429a      	cmp	r2, r3
 800287a:	d004      	beq.n	8002886 <UART_SetConfig+0x7e>
 800287c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4bc3      	ldr	r3, [pc, #780]	; (8002b90 <UART_SetConfig+0x388>)
 8002882:	429a      	cmp	r2, r3
 8002884:	d103      	bne.n	800288e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002886:	f7ff fb99 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 800288a:	6778      	str	r0, [r7, #116]	; 0x74
 800288c:	e002      	b.n	8002894 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800288e:	f7ff fb81 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002892:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800289c:	f040 80b6 	bne.w	8002a0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a2:	461c      	mov	r4, r3
 80028a4:	f04f 0500 	mov.w	r5, #0
 80028a8:	4622      	mov	r2, r4
 80028aa:	462b      	mov	r3, r5
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	6439      	str	r1, [r7, #64]	; 0x40
 80028b0:	415b      	adcs	r3, r3
 80028b2:	647b      	str	r3, [r7, #68]	; 0x44
 80028b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028b8:	1912      	adds	r2, r2, r4
 80028ba:	eb45 0303 	adc.w	r3, r5, r3
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	00d9      	lsls	r1, r3, #3
 80028c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028cc:	00d0      	lsls	r0, r2, #3
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	1911      	adds	r1, r2, r4
 80028d4:	6639      	str	r1, [r7, #96]	; 0x60
 80028d6:	416b      	adcs	r3, r5
 80028d8:	667b      	str	r3, [r7, #100]	; 0x64
 80028da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	461a      	mov	r2, r3
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80028e8:	415b      	adcs	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028f4:	f7fd fc70 	bl	80001d8 <__aeabi_uldivmod>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4ba5      	ldr	r3, [pc, #660]	; (8002b94 <UART_SetConfig+0x38c>)
 80028fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	011e      	lsls	r6, r3, #4
 8002906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002908:	461c      	mov	r4, r3
 800290a:	f04f 0500 	mov.w	r5, #0
 800290e:	4622      	mov	r2, r4
 8002910:	462b      	mov	r3, r5
 8002912:	1891      	adds	r1, r2, r2
 8002914:	6339      	str	r1, [r7, #48]	; 0x30
 8002916:	415b      	adcs	r3, r3
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
 800291a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800291e:	1912      	adds	r2, r2, r4
 8002920:	eb45 0303 	adc.w	r3, r5, r3
 8002924:	f04f 0000 	mov.w	r0, #0
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	00d9      	lsls	r1, r3, #3
 800292e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002932:	00d0      	lsls	r0, r2, #3
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	1911      	adds	r1, r2, r4
 800293a:	65b9      	str	r1, [r7, #88]	; 0x58
 800293c:	416b      	adcs	r3, r5
 800293e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	461a      	mov	r2, r3
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	1891      	adds	r1, r2, r2
 800294c:	62b9      	str	r1, [r7, #40]	; 0x28
 800294e:	415b      	adcs	r3, r3
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002956:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800295a:	f7fd fc3d 	bl	80001d8 <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <UART_SetConfig+0x38c>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	2164      	movs	r1, #100	; 0x64
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3332      	adds	r3, #50	; 0x32
 8002976:	4a87      	ldr	r2, [pc, #540]	; (8002b94 <UART_SetConfig+0x38c>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002984:	441e      	add	r6, r3
 8002986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002988:	4618      	mov	r0, r3
 800298a:	f04f 0100 	mov.w	r1, #0
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	1894      	adds	r4, r2, r2
 8002994:	623c      	str	r4, [r7, #32]
 8002996:	415b      	adcs	r3, r3
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800299e:	1812      	adds	r2, r2, r0
 80029a0:	eb41 0303 	adc.w	r3, r1, r3
 80029a4:	f04f 0400 	mov.w	r4, #0
 80029a8:	f04f 0500 	mov.w	r5, #0
 80029ac:	00dd      	lsls	r5, r3, #3
 80029ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029b2:	00d4      	lsls	r4, r2, #3
 80029b4:	4622      	mov	r2, r4
 80029b6:	462b      	mov	r3, r5
 80029b8:	1814      	adds	r4, r2, r0
 80029ba:	653c      	str	r4, [r7, #80]	; 0x50
 80029bc:	414b      	adcs	r3, r1
 80029be:	657b      	str	r3, [r7, #84]	; 0x54
 80029c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	461a      	mov	r2, r3
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	1891      	adds	r1, r2, r2
 80029cc:	61b9      	str	r1, [r7, #24]
 80029ce:	415b      	adcs	r3, r3
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029da:	f7fd fbfd 	bl	80001d8 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <UART_SetConfig+0x38c>)
 80029e4:	fba3 1302 	umull	r1, r3, r3, r2
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	2164      	movs	r1, #100	; 0x64
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	3332      	adds	r3, #50	; 0x32
 80029f6:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <UART_SetConfig+0x38c>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	f003 0207 	and.w	r2, r3, #7
 8002a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4432      	add	r2, r6
 8002a08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a0a:	e0b9      	b.n	8002b80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0e:	461c      	mov	r4, r3
 8002a10:	f04f 0500 	mov.w	r5, #0
 8002a14:	4622      	mov	r2, r4
 8002a16:	462b      	mov	r3, r5
 8002a18:	1891      	adds	r1, r2, r2
 8002a1a:	6139      	str	r1, [r7, #16]
 8002a1c:	415b      	adcs	r3, r3
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a24:	1912      	adds	r2, r2, r4
 8002a26:	eb45 0303 	adc.w	r3, r5, r3
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	00d9      	lsls	r1, r3, #3
 8002a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a38:	00d0      	lsls	r0, r2, #3
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	eb12 0804 	adds.w	r8, r2, r4
 8002a42:	eb43 0905 	adc.w	r9, r3, r5
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	008b      	lsls	r3, r1, #2
 8002a5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a5e:	0082      	lsls	r2, r0, #2
 8002a60:	4640      	mov	r0, r8
 8002a62:	4649      	mov	r1, r9
 8002a64:	f7fd fbb8 	bl	80001d8 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <UART_SetConfig+0x38c>)
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	011e      	lsls	r6, r3, #4
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	1894      	adds	r4, r2, r2
 8002a84:	60bc      	str	r4, [r7, #8]
 8002a86:	415b      	adcs	r3, r3
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8e:	1812      	adds	r2, r2, r0
 8002a90:	eb41 0303 	adc.w	r3, r1, r3
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	f04f 0500 	mov.w	r5, #0
 8002a9c:	00dd      	lsls	r5, r3, #3
 8002a9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002aa2:	00d4      	lsls	r4, r2, #3
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	1814      	adds	r4, r2, r0
 8002aaa:	64bc      	str	r4, [r7, #72]	; 0x48
 8002aac:	414b      	adcs	r3, r1
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	008b      	lsls	r3, r1, #2
 8002ac4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ac8:	0082      	lsls	r2, r0, #2
 8002aca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ace:	f7fd fb83 	bl	80001d8 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <UART_SetConfig+0x38c>)
 8002ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	2164      	movs	r1, #100	; 0x64
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	3332      	adds	r3, #50	; 0x32
 8002aea:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <UART_SetConfig+0x38c>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af6:	441e      	add	r6, r3
 8002af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afa:	4618      	mov	r0, r3
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	1894      	adds	r4, r2, r2
 8002b06:	603c      	str	r4, [r7, #0]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b10:	1812      	adds	r2, r2, r0
 8002b12:	eb41 0303 	adc.w	r3, r1, r3
 8002b16:	f04f 0400 	mov.w	r4, #0
 8002b1a:	f04f 0500 	mov.w	r5, #0
 8002b1e:	00dd      	lsls	r5, r3, #3
 8002b20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b24:	00d4      	lsls	r4, r2, #3
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	eb12 0a00 	adds.w	sl, r2, r0
 8002b2e:	eb43 0b01 	adc.w	fp, r3, r1
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	008b      	lsls	r3, r1, #2
 8002b46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b4a:	0082      	lsls	r2, r0, #2
 8002b4c:	4650      	mov	r0, sl
 8002b4e:	4659      	mov	r1, fp
 8002b50:	f7fd fb42 	bl	80001d8 <__aeabi_uldivmod>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <UART_SetConfig+0x38c>)
 8002b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2164      	movs	r1, #100	; 0x64
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	3332      	adds	r3, #50	; 0x32
 8002b6c:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <UART_SetConfig+0x38c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4432      	add	r2, r6
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	377c      	adds	r7, #124	; 0x7c
 8002b84:	46bd      	mov	sp, r7
 8002b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40011400 	.word	0x40011400
 8002b94:	51eb851f 	.word	0x51eb851f

08002b98 <__libc_init_array>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	4d0d      	ldr	r5, [pc, #52]	; (8002bd0 <__libc_init_array+0x38>)
 8002b9c:	4c0d      	ldr	r4, [pc, #52]	; (8002bd4 <__libc_init_array+0x3c>)
 8002b9e:	1b64      	subs	r4, r4, r5
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	42a6      	cmp	r6, r4
 8002ba6:	d109      	bne.n	8002bbc <__libc_init_array+0x24>
 8002ba8:	4d0b      	ldr	r5, [pc, #44]	; (8002bd8 <__libc_init_array+0x40>)
 8002baa:	4c0c      	ldr	r4, [pc, #48]	; (8002bdc <__libc_init_array+0x44>)
 8002bac:	f000 f820 	bl	8002bf0 <_init>
 8002bb0:	1b64      	subs	r4, r4, r5
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	42a6      	cmp	r6, r4
 8002bb8:	d105      	bne.n	8002bc6 <__libc_init_array+0x2e>
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc0:	4798      	blx	r3
 8002bc2:	3601      	adds	r6, #1
 8002bc4:	e7ee      	b.n	8002ba4 <__libc_init_array+0xc>
 8002bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bca:	4798      	blx	r3
 8002bcc:	3601      	adds	r6, #1
 8002bce:	e7f2      	b.n	8002bb6 <__libc_init_array+0x1e>
 8002bd0:	08002c28 	.word	0x08002c28
 8002bd4:	08002c28 	.word	0x08002c28
 8002bd8:	08002c28 	.word	0x08002c28
 8002bdc:	08002c2c 	.word	0x08002c2c

08002be0 <memset>:
 8002be0:	4402      	add	r2, r0
 8002be2:	4603      	mov	r3, r0
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <memset+0xa>
 8002be8:	4770      	bx	lr
 8002bea:	f803 1b01 	strb.w	r1, [r3], #1
 8002bee:	e7f9      	b.n	8002be4 <memset+0x4>

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
